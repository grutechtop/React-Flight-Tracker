[{"C:\\Data\\GitHub\\react-flight-tracker\\src\\serviceWorker.ts":"1","C:\\Data\\GitHub\\react-flight-tracker\\src\\pages\\StartPage.tsx":"2","C:\\Data\\GitHub\\react-flight-tracker\\src\\services\\openSkyAPIService.ts":"3","C:\\Data\\GitHub\\react-flight-tracker\\src\\pages\\App.tsx":"4","C:\\Data\\GitHub\\react-flight-tracker\\src\\opensky\\constants.ts":"5","C:\\Data\\GitHub\\react-flight-tracker\\src\\services\\geospatialService.ts":"6","C:\\Data\\GitHub\\react-flight-tracker\\src\\helpers\\index.ts":"7","C:\\Data\\GitHub\\react-flight-tracker\\src\\mapbox\\index.ts":"8","C:\\Data\\GitHub\\react-flight-tracker\\src\\opensky\\types.ts":"9","C:\\Data\\GitHub\\react-flight-tracker\\src\\components\\AircraftInfoOverlay.tsx":"10","C:\\Data\\GitHub\\react-flight-tracker\\src\\components\\FlightMap.tsx":"11","C:\\Data\\GitHub\\react-flight-tracker\\src\\index.tsx":"12","C:\\Data\\GitHub\\react-flight-tracker\\src\\pages\\ErrorPage.tsx":"13","C:\\Data\\GitHub\\react-flight-tracker\\src\\helpers\\aircraftDataFunctions.ts":"14","C:\\Data\\GitHub\\react-flight-tracker\\src\\views\\index.ts":"15","C:\\Data\\GitHub\\react-flight-tracker\\src\\views\\MapView.tsx":"16","C:\\Data\\GitHub\\react-flight-tracker\\src\\pages\\RouterPage.tsx":"17","C:\\Data\\GitHub\\react-flight-tracker\\src\\views\\navigation.ts":"18","C:\\Data\\GitHub\\react-flight-tracker\\src\\mapbox\\constants.ts":"19","C:\\Data\\GitHub\\react-flight-tracker\\src\\opensky\\index.ts":"20","C:\\Data\\GitHub\\react-flight-tracker\\src\\dialogs\\ViewInjectorDialog.tsx":"21","C:\\Data\\GitHub\\react-flight-tracker\\src\\views\\SettingsView.tsx":"22","C:\\Data\\GitHub\\react-flight-tracker\\src\\pages\\ContextPage.tsx":"23","C:\\Data\\GitHub\\react-flight-tracker\\src\\services\\index.ts":"24"},{"size":5295,"mtime":1583822255934,"results":"25","hashOfConfig":"26"},{"size":2608,"mtime":1608214133532,"results":"27","hashOfConfig":"26"},{"size":13750,"mtime":1608114367877,"results":"28","hashOfConfig":"26"},{"size":2184,"mtime":1608212434304,"results":"29","hashOfConfig":"26"},{"size":471,"mtime":1584343496754,"results":"30","hashOfConfig":"26"},{"size":5757,"mtime":1608112360651,"results":"31","hashOfConfig":"26"},{"size":40,"mtime":1584339402526,"results":"32","hashOfConfig":"26"},{"size":29,"mtime":1583822255911,"results":"33","hashOfConfig":"26"},{"size":4187,"mtime":1584343496756,"results":"34","hashOfConfig":"26"},{"size":11832,"mtime":1608112360627,"results":"35","hashOfConfig":"26"},{"size":6430,"mtime":1608214114711,"results":"36","hashOfConfig":"26"},{"size":436,"mtime":1583822255908,"results":"37","hashOfConfig":"26"},{"size":1147,"mtime":1608121643060,"results":"38","hashOfConfig":"26"},{"size":2819,"mtime":1584424091551,"results":"39","hashOfConfig":"26"},{"size":112,"mtime":1608121643053,"results":"40","hashOfConfig":"26"},{"size":3029,"mtime":1608121643050,"results":"41","hashOfConfig":"26"},{"size":5073,"mtime":1608209398148,"results":"42","hashOfConfig":"26"},{"size":1735,"mtime":1608205436847,"results":"43","hashOfConfig":"26"},{"size":149,"mtime":1583822255909,"results":"44","hashOfConfig":"26"},{"size":54,"mtime":1583916036093,"results":"45","hashOfConfig":"26"},{"size":3063,"mtime":1608205409628,"results":"46","hashOfConfig":"26"},{"size":2462,"mtime":1608213602803,"results":"47","hashOfConfig":"26"},{"size":809,"mtime":1608210696413,"results":"48","hashOfConfig":"26"},{"size":74,"mtime":1584343496786,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"11zi27o",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"67","usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"82"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Data\\GitHub\\react-flight-tracker\\src\\serviceWorker.ts",[],["110","111"],"C:\\Data\\GitHub\\react-flight-tracker\\src\\pages\\StartPage.tsx",[],"C:\\Data\\GitHub\\react-flight-tracker\\src\\services\\openSkyAPIService.ts",["112","113"],"import { IService, Service, ServiceStateEnumeration, ServiceKeys, IRESTService, IResponse, createResponse, ResponseStateEnumeration } from '@daniel.neuweiler/ts-lib-module';\nimport {\n  IStateVectorData, IStateVectorRawData, IStateVector,\n  IAircraftFlight, IAircraftTrack,\n  IMapGeoBounds\n} from './../opensky/types';\nimport { URL, Constants } from './../opensky/constants';\n\nconst defaultStateInterval: number = 12000;\nconst registeredSatetInterval: number = 6000;\nconst metadataInterval: number = 5000;\n\nexport type StateVectorsUpdatedCallbackMethod = (stateVectors: IStateVectorData) => void;\ninterface IStateVectorsUpdatedSubscriberDictionary { [key: string]: StateVectorsUpdatedCallbackMethod };\n\nexport type AircraftTrackUpdatedCallbackMethod = (track: IAircraftTrack) => void;\ninterface IAircraftTrackUpdatedSubscriberDictionary { [key: string]: AircraftTrackUpdatedCallbackMethod };\n\nexport interface IOpenSkyAPIService extends IService {\n  geoBounds: IMapGeoBounds;\n  onStateVectorsUpdated: (contextKey: string, callbackHandler: StateVectorsUpdatedCallbackMethod) => string;\n  offStateVectorsUpdated: (registerKey: string) => boolean;\n  trackAircraft: (icao24: string) => void;\n  releaseTrack: (icao24: string) => void;\n  onAircraftTrackUpdated: (contextKey: string, callbackHandler: AircraftTrackUpdatedCallbackMethod) => string;\n  offAircraftTrackUpdated: (registerKey: string) => boolean;\n};\n\nexport class OpenSkyAPIService extends Service implements IOpenSkyAPIService {\n\n  // IOpenSkyAPIService\n  public geoBounds: IMapGeoBounds;\n\n  // Props\n  private restService?: IRESTService;\n\n  private userName?: string;\n  private password?: string;\n  private hasCredentials: boolean = false;\n\n  private fetchStateVectorsIntervalID: number = 0;\n  private isFetchingStateVectors: boolean = false;\n  private stateVectorsUpdatedSubscriberDictionary: IStateVectorsUpdatedSubscriberDictionary = {};\n  private stateVectorsUpdatedSubscriptionCounter: number = 0;\n\n  private fetchAircraftStateIntervalID: number = 0;\n  private isFetchingAircraftStateVector: boolean = false;\n\n  private fetchAircraftRouteIntervalID: number = 0;\n  private isFetchingAircraftRoute: boolean = false;\n\n  private fetchAircraftDataIntervalID: number = 0;\n  private isFetchingAircraftData: boolean = false;\n\n  private aircraftTrackUpdatedSubscriberDictionary: IAircraftTrackUpdatedSubscriberDictionary = {};\n  private aircraftTrackUpdatedSubscriptionCounter: number = 0;\n  private trackedAircraft: IAircraftTrack;\n\n  constructor(userName?: string, password?: string) {\n    super('OpenSkyAPIService');\n\n    this.userName = userName;\n    this.password = password;\n\n    this.geoBounds = {\n      southernLatitude: Constants.DEFAULT_MIN_LATITUDE,\n      northernLatitude: Constants.DEFAULT_MAX_LATITUDE,\n      westernLongitude: Constants.DEFAULT_MIN_LONGITUDE,\n      easternLongitude: Constants.DEFAULT_MAX_LONGITUDE\n    };\n\n    this.trackedAircraft = {\n      icao24: '',\n      callsign: ''\n    };\n  };\n\n  public onStateVectorsUpdated = (contextKey: string, callbackHandler: StateVectorsUpdatedCallbackMethod) => {\n\n    // Setup register key\n    this.stateVectorsUpdatedSubscriptionCounter++;\n    const registerKey = `${contextKey}_${this.stateVectorsUpdatedSubscriptionCounter}`\n\n    // Register callback\n    this.stateVectorsUpdatedSubscriberDictionary[registerKey] = callbackHandler;\n    this.logger.debug(`Component with key '${registerKey}' has subscribed on 'StateVectorsUpdated'.`);\n    this.logger.debug(`'${Object.entries(this.stateVectorsUpdatedSubscriberDictionary).length}' subscribers on 'StateVectorsUpdated'.`);\n\n    return registerKey;\n  };\n\n  public offStateVectorsUpdated = (registerKey: string) => {\n\n    // Delete callback\n    var existingSubscriber = Object.entries(this.stateVectorsUpdatedSubscriberDictionary).find(([key, value]) => key === registerKey);\n    if (existingSubscriber) {\n\n      delete this.stateVectorsUpdatedSubscriberDictionary[registerKey];\n      this.logger.debug(`Component with key '${registerKey}' has unsubscribed on 'StateVectorsUpdated'.`);\n      this.logger.debug(`'${Object.entries(this.stateVectorsUpdatedSubscriberDictionary).length}' subscribers on 'StateVectorsUpdated'.`);\n\n      return true;\n    }\n    else {\n\n      this.logger.error(`Component with key '${registerKey}' not registered on 'StateVectorsUpdated'.`);\n      this.logger.debug(`'${Object.entries(this.stateVectorsUpdatedSubscriberDictionary).length}' subscribers on 'StateVectorsUpdated'.`);\n\n      return false;\n    };\n  };\n\n  public trackAircraft = (icao24: string) => {\n\n    if (this.trackedAircraft.icao24 !== '') {\n\n      this.logger.info(`Stop tracking for aircraft '${this.trackedAircraft.icao24}'.`);\n    }\n\n    clearInterval(this.fetchAircraftStateIntervalID);\n    clearInterval(this.fetchAircraftRouteIntervalID);\n    clearInterval(this.fetchAircraftDataIntervalID);\n\n    this.trackedAircraft.icao24 = icao24;\n    this.trackedAircraft.callsign = '';\n    this.logger.info(`Start tracking for aircraft '${icao24}'.`);\n\n    this.fetchAircraftState();\n    // this.fetchAircraftRoute();\n    // this.fetchAircraftData();\n\n    const fetchStateVectorInterval: number = this.hasCredentials ? registeredSatetInterval : defaultStateInterval;\n    this.fetchAircraftStateIntervalID = window.setInterval(this.fetchAircraftState, fetchStateVectorInterval);\n  };\n\n  public releaseTrack = (icao24: string) => {\n\n    clearInterval(this.fetchAircraftStateIntervalID);\n    clearInterval(this.fetchAircraftRouteIntervalID);\n    clearInterval(this.fetchAircraftDataIntervalID);\n\n    this.trackedAircraft.icao24 = '';\n    this.trackedAircraft.callsign = '';\n    this.logger.info(`Stop tracking for aircraft '${icao24}'.`);\n  };\n\n  public onAircraftTrackUpdated = (contextKey: string, callbackHandler: AircraftTrackUpdatedCallbackMethod) => {\n\n    // Setup register key\n    this.aircraftTrackUpdatedSubscriptionCounter++;\n    const registerKey = `${contextKey}_${this.aircraftTrackUpdatedSubscriptionCounter}`\n\n    // Register callback\n    this.aircraftTrackUpdatedSubscriberDictionary[registerKey] = callbackHandler;\n    this.logger.debug(`Component with key '${registerKey}' has subscribed on 'AircraftTrackUpdated'.`);\n    this.logger.debug(`'${Object.entries(this.aircraftTrackUpdatedSubscriberDictionary).length}' subscribers on 'AircraftTrackUpdated'.`);\n\n    return registerKey;\n  };\n\n  public offAircraftTrackUpdated = (registerKey: string) => {\n\n    // Delete callback\n    var existingSubscriber = Object.entries(this.aircraftTrackUpdatedSubscriberDictionary).find(([key, value]) => key === registerKey);\n    if (existingSubscriber) {\n\n      delete this.aircraftTrackUpdatedSubscriberDictionary[registerKey];\n      this.logger.debug(`Component with key '${registerKey}' has unsubscribed on 'StateVectorsUpdated'.`);\n      this.logger.debug(`'${Object.entries(this.aircraftTrackUpdatedSubscriberDictionary).length}' subscribers on 'StateVectorsUpdated'.`);\n\n      return true;\n    }\n    else {\n\n      this.logger.error(`Component with key '${registerKey}' not registered on 'StateVectorsUpdated'.`);\n      this.logger.debug(`'${Object.entries(this.aircraftTrackUpdatedSubscriberDictionary).length}' subscribers on 'StateVectorsUpdated'.`);\n\n      return false;\n    };\n  };\n\n  protected async onStarting(): Promise<IResponse<boolean>> {\n\n    // Setup response\n    const response = createResponse<boolean>(true, ResponseStateEnumeration.OK, []);\n\n    // Check if the service provider was injected\n    if (!this.serviceProvider) {\n\n      this.updateState(ServiceStateEnumeration.Error);\n\n      response.payload = false;\n      response.messageStack = [\n        {\n          display: {\n            key: \"\",\n            value: `No service provider is injected. Service ${this.key} cannnot be started.`\n          },\n          context: ''\n        }\n      ]\n      return response;\n    };\n\n    // Get the REST service\n    this.restService = this.serviceProvider.getService<IRESTService>(ServiceKeys.RESTService);\n    if (!this.restService) {\n\n      this.updateState(ServiceStateEnumeration.Error);\n      response.payload = false;\n      response.messageStack = [\n        {\n          display: {\n            key: \"\",\n            value: `No REST service is available. Service ${this.key} cannnot be started.`\n          },\n          context: ''\n        }\n      ]\n      return response;\n    };\n\n    // Check for authorization\n    if (this.userName && this.password) {\n\n      this.hasCredentials = true;\n      this.restService.setAuthorization(`Basic ${btoa(`${this.userName}:${this.password}`)}`);\n\n      this.userName = undefined;\n      this.password = undefined;\n    };\n\n    const fetchStateVectorInterval: number = this.hasCredentials ? registeredSatetInterval : defaultStateInterval;\n    this.fetchStateVectorsIntervalID = window.setInterval(this.fetchStateVectors, fetchStateVectorInterval);\n\n    return response;\n  };\n\n  protected async onStopping(): Promise<IResponse<boolean>> {\n\n    clearInterval(this.fetchStateVectorsIntervalID);\n    clearInterval(this.fetchAircraftStateIntervalID);\n    clearInterval(this.fetchAircraftRouteIntervalID);\n    clearInterval(this.fetchAircraftDataIntervalID);\n\n    return createResponse<boolean>(true, ResponseStateEnumeration.OK, []);\n  };\n\n  private mapRawStateVectorData = (rawData: IStateVectorRawData) => {\n\n    const data: IStateVectorData = {\n      time: rawData.time,\n      states: []\n    };\n\n    if (!rawData.states)\n      return data;\n\n    for (var rawStateVector of rawData.states) {\n\n      const stateVector: IStateVector = {\n        icao24: rawStateVector[0],\n        callsign: rawStateVector[1],\n        origin_country: rawStateVector[2],\n        time_position: rawStateVector[3],\n        last_contact: rawStateVector[4],\n        longitude: rawStateVector[5],\n        latitude: rawStateVector[6],\n        baro_altitude: rawStateVector[7],\n        on_ground: rawStateVector[8],\n        velocity: rawStateVector[9],\n        true_track: rawStateVector[10],\n        vertical_rate: rawStateVector[11],\n        sensors: rawStateVector[12],\n        geo_altitude: rawStateVector[13],\n        squawk: rawStateVector[14],\n        spi: rawStateVector[15],\n        position_source: rawStateVector[16],\n      }\n\n      data.states.push(stateVector);\n    }\n\n    return data;\n  };\n\n  private fetchStateVectors = () => {\n\n    if (!this.restService)\n      return;\n\n    if (this.isFetchingStateVectors)\n      return;\n\n    this.isFetchingStateVectors = true;\n\n    var stateBounds = `?lamin=${this.geoBounds.southernLatitude}&lomin=${this.geoBounds.westernLongitude}&lamax=${this.geoBounds.northernLatitude}&lomax=${this.geoBounds.easternLongitude}`;\n    var targetURL = `${URL}/states/all${stateBounds}`;\n\n    this.restService.get<IStateVectorRawData>(targetURL, {\n      mode: 'cors',\n      credentials: this.hasCredentials ? 'include' : 'omit'\n    })\n      .then(response => {\n\n        if (response.payload) {\n\n          var mappedData = this.mapRawStateVectorData(response.payload);\n          Object.entries(this.stateVectorsUpdatedSubscriberDictionary).forEach(([key, value], index) => value(mappedData))\n        }\n\n        this.isFetchingStateVectors = false;\n      })\n      .finally(() => {\n\n        this.isFetchingStateVectors = false;\n      })\n  };\n\n  private fetchAircraftState = () => {\n\n    if (!this.restService)\n      return;\n\n    if (this.trackedAircraft.icao24 === '')\n      return;\n\n    if (this.isFetchingAircraftStateVector)\n      return;\n\n    this.isFetchingAircraftStateVector = true;\n\n    var targetURL = `${URL}/states/all?&icao24=${this.trackedAircraft.icao24}`;\n\n    this.restService.get<IStateVectorRawData>(targetURL, {\n      mode: 'cors',\n      credentials: this.hasCredentials ? 'include' : 'omit'\n    })\n      .then(response => {\n\n        if (response.payload) {\n\n          var mappedData = this.mapRawStateVectorData(response.payload);\n\n          if (mappedData.states.length > 0) {\n\n            this.trackedAircraft.stateVector = mappedData.states[0]\n            this.trackedAircraft.callsign = this.trackedAircraft.stateVector.callsign ? this.trackedAircraft.stateVector.callsign : '';\n\n            Object.entries(this.aircraftTrackUpdatedSubscriberDictionary).forEach(([key, value], index) => value(this.trackedAircraft))\n          }\n        }\n\n        this.isFetchingAircraftStateVector = false;\n      })\n      .finally(() => {\n\n        this.isFetchingAircraftStateVector = false;\n      })\n  };\n\n  private fetchAircraftRoute = () => {\n\n    if (!this.restService)\n      return;\n\n    if (this.trackedAircraft.callsign === '')\n      return;\n\n    if (this.isFetchingAircraftRoute)\n      return;\n\n    this.isFetchingAircraftRoute = true;\n\n    var targetURL = `${URL}/routes?callsign=${this.trackedAircraft.callsign}`;\n\n    this.restService.get<any>(targetURL, {\n      mode: 'no-cors',\n      credentials: this.hasCredentials ? 'include' : 'omit'\n    })\n      .then(response => {\n\n        if (response.payload) {\n\n          //Todo\n        }\n\n        this.isFetchingAircraftRoute = false;\n      })\n      .finally(() => {\n\n        this.isFetchingAircraftRoute = false;\n      })\n  };\n\n  private fetchAircraftData = () => {\n\n    if (!this.restService)\n      return;\n\n    if (this.trackedAircraft.icao24 === '')\n      return;\n\n    if (this.isFetchingAircraftData)\n      return;\n\n    this.isFetchingAircraftData = true;\n\n    var targetURL = `${URL}/metadata/aircraft/icao/${this.trackedAircraft.icao24}`;\n\n    this.restService.get<any>(targetURL, {\n      mode: 'no-cors',\n      credentials: 'include'\n    })\n      .then(response => {\n\n        if (response.payload) {\n\n          //Todo\n        }\n\n        this.isFetchingAircraftData = false;\n      })\n      .finally(() => {\n\n        this.isFetchingAircraftData = false;\n      })\n  };\n};",["114","115"],"C:\\Data\\GitHub\\react-flight-tracker\\src\\pages\\App.tsx",[],["116","117"],"C:\\Data\\GitHub\\react-flight-tracker\\src\\opensky\\constants.ts",[],["118","119"],"C:\\Data\\GitHub\\react-flight-tracker\\src\\services\\geospatialService.ts",["120","121","122"],"import { IService, Service, IResponse, createResponse, ResponseStateEnumeration } from '@daniel.neuweiler/ts-lib-module';\nimport { Feature, GeoJsonProperties, Point } from 'geojson';\nimport destination from '@turf/destination';\n\nimport { IStateVectorData, IAircraftTrack, IStateVector } from '../opensky';\n\n// Earth radius in meters\nconst earthRadius = 6371008.8;\n\nexport type PathPredictionUpdatedCallbackMethod = (destinations: Array<Feature<Point, GeoJsonProperties>>) => void;\ninterface IPathPredictionUpdatedSubscriberDictionary { [key: string]: PathPredictionUpdatedCallbackMethod };\n\nexport interface IGeospatialService extends IService {\n  restartPathPrediction: (stateVectors: IStateVectorData) => void;\n  stopPathPrediction: () => void;\n  onPathPredictionUpdated: (contextKey: string, callbackHandler: PathPredictionUpdatedCallbackMethod) => string;\n  offPathPredictionUpdated: (registerKey: string) => boolean;\n};\n\nexport class GeospatialService extends Service implements IGeospatialService {\n\n  // Props\n  private pathPredictionInterval: number = 100;\n  private pathPredictionCounter: number = 0;\n  private pathPredictionIntervalID: number = 0;\n  private pathPredictionUpdatedSubscriberDictionary: IPathPredictionUpdatedSubscriberDictionary = {};\n  private pathPredictionUpdatedSubscriptionCounter: number = 0;\n\n  constructor() {\n    super('GeospatialService');\n\n  };\n\n  public restartPathPrediction = (stateVectors: IStateVectorData) => {\n\n    clearInterval(this.pathPredictionIntervalID);\n    this.pathPredictionCounter = 0;\n    this.pathPredictionIntervalID = window.setInterval(this.calculatePath, this.pathPredictionInterval, stateVectors);\n  };\n\n  public stopPathPrediction = () => {\n\n    clearInterval(this.pathPredictionIntervalID);\n  };\n\n  public onPathPredictionUpdated = (contextKey: string, callbackHandler: PathPredictionUpdatedCallbackMethod) => {\n\n    // Setup register key\n    this.pathPredictionUpdatedSubscriptionCounter++;\n    const registerKey = `${contextKey}_${this.pathPredictionUpdatedSubscriptionCounter}`\n\n    // Register callback\n    this.pathPredictionUpdatedSubscriberDictionary[registerKey] = callbackHandler;\n    this.logger.debug(`Component with key '${registerKey}' has subscribed on 'PathPredictionUpdated'.`);\n    this.logger.debug(`'${Object.entries(this.pathPredictionUpdatedSubscriberDictionary).length}' subscribers on 'PathPredictionUpdated'.`);\n\n    return registerKey;\n  };\n\n  public offPathPredictionUpdated = (registerKey: string) => {\n\n    // Delete callback\n    var existingSubscriber = Object.entries(this.pathPredictionUpdatedSubscriberDictionary).find(([key, value]) => key === registerKey);\n    if (existingSubscriber) {\n\n      delete this.pathPredictionUpdatedSubscriberDictionary[registerKey];\n      this.logger.debug(`Component with key '${registerKey}' has unsubscribed on 'PathPredictionUpdated'.`);\n      this.logger.debug(`'${Object.entries(this.pathPredictionUpdatedSubscriberDictionary).length}' subscribers on 'PathPredictionUpdated'.`);\n\n      return true;\n    }\n    else {\n\n      this.logger.error(`Component with key '${registerKey}' not registered on 'PathPredictionUpdated'.`);\n      this.logger.debug(`'${Object.entries(this.pathPredictionUpdatedSubscriberDictionary).length}' subscribers on 'PathPredictionUpdated'.`);\n\n      return false;\n    };\n  };\n\n  protected async onStarting(): Promise<IResponse<boolean>> {\n    return createResponse<boolean>(true, ResponseStateEnumeration.OK, []);\n  };\n\n  protected async onStopping(): Promise<IResponse<boolean>> {\n\n    clearInterval(this.pathPredictionIntervalID);\n\n    return createResponse<boolean>(true, ResponseStateEnumeration.OK, []);\n  };\n\n  private calculatePath = (stateVectors: IStateVectorData) => {\n\n    const features: Array<Feature<Point, GeoJsonProperties>> = [];\n\n    for (var stateVector of stateVectors.states) {\n\n      // Setup last position time in ms\n      var lastPositionTime = this.pathPredictionCounter\n\n      // Setup altitude in m\n      var altitude = stateVector.geo_altitude;\n      if ((altitude === null) || (altitude < 0))\n        altitude = stateVector.baro_altitude;\n      if ((altitude === null) || (altitude < 0))\n        altitude = 0;\n\n      // Setup vertical rate\n      var verticalRate = stateVector.vertical_rate ? stateVector.vertical_rate : 0.0;\n      if (verticalRate < 0)\n        verticalRate *= -1;\n\n      const origin: Array<number> = [stateVector.longitude ? stateVector.longitude : 0, stateVector.latitude ? stateVector.latitude : 0]\n      const velocity = stateVector.velocity ? stateVector.velocity : 0;\n\n      var distance = (velocity * lastPositionTime) / 1000;\n\n      // Try to adjust the distance to the vertical rate\n      if (verticalRate !== 0)\n        distance = distance - (verticalRate * (lastPositionTime / 1000));\n\n      // Try to adjust the distance to the altitude\n      if (altitude > 0)\n        distance = (distance * earthRadius) / (earthRadius + altitude);\n\n      const bearing = stateVector.true_track ? stateVector.true_track : 0;\n\n      // Calculate the destination\n      const feature = destination(\n        origin,\n        distance,\n        bearing,\n        {\n          units: \"meters\"\n        }\n      );\n\n      // Adding the ICAO24 prop to the feature so that a corresponding assignment is possible later\n      var properties: GeoJsonProperties = {\n        ['icao24']: stateVector.icao24\n      };\n      feature.properties = properties;\n\n      // Push the feature to the collection\n      features.push(feature);\n    }\n\n    // Increase counter time\n    this.pathPredictionCounter += this.pathPredictionInterval;\n\n    // Execute callbacks\n    Object.entries(this.pathPredictionUpdatedSubscriberDictionary).forEach(([key, value], index) => value(features))\n  };\n}\n","C:\\Data\\GitHub\\react-flight-tracker\\src\\helpers\\index.ts",[],"C:\\Data\\GitHub\\react-flight-tracker\\src\\mapbox\\index.ts",[],"C:\\Data\\GitHub\\react-flight-tracker\\src\\opensky\\types.ts",[],["123","124"],"C:\\Data\\GitHub\\react-flight-tracker\\src\\components\\AircraftInfoOverlay.tsx",["125","126"],"import React, { useState, useRef, useEffect } from 'react';\nimport { Indicator1 } from '@daniel.neuweiler/react-lib-module';\nimport { createStyles, makeStyles, Theme, useTheme } from '@material-ui/core/styles';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport { IAircraftTrack, IStateVector } from '../opensky';\nimport { getFormattedValue, getIcon, getRotation, getStatusText } from '../helpers';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    overlayIndicatorRoot: {\n      position: 'relative',\n      minWidth: 268,\n      minHeight: 84,\n      height: '100%',\n      backgroundColor: theme.palette.grey[500],\n      borderRadius: 4,\n      opacity: 0.9,\n      display: 'flex',\n      flexDirection: 'column',\n      alignContent: 'center',\n      alignItems: 'center',\n      justifyContent: 'center',\n      justifyItems: 'center'\n    },\n    overlayRoot: {\n      position: 'relative',\n      minWidth: 268,\n      height: 'auto',\n      width: 'auto',\n      backgroundColor: theme.palette.grey[500],\n      color: theme.palette.grey[900],\n      borderRadius: 4,\n      opacity: 0.9,\n      padding: theme.spacing(1)\n    },\n    headerContainer: {\n      width: '100%',\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      alignContent: 'center'\n    },\n    headerIconContainer: {\n      backgroundColor: theme.palette.primary.main,\n      borderRadius: '50%',\n      width: 36,\n      height: 36,\n      display: 'flex',\n      alignItems: 'center',\n      alignContent: 'center',\n      justifyItems: 'center',\n      justifyContent: 'center',\n      textAlign: 'center'\n    },\n    headerIcon: {\n      fill: '#fff',\n      width: 24,\n      height: 24\n    },\n    headerTextContainer: {\n      marginLeft: 'auto',\n      marginRight: 8,\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'flex-end',\n      alignContent: 'flex-end'\n    },\n    headerText1: {\n      fontSize: 24,\n      fontWeight: 'normal'\n    },\n    headerText2: {\n      fontSize: 16,\n      fontWeight: 'normal'\n    },\n    headerLine: {\n      width: '100%',\n      height: 1,\n      marginTop: 8,\n      marginBottom: 16,\n      backgroundColor: '#000'\n    },\n    textContainer: {\n      width: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'flex-start',\n      alignContent: 'flex-start'\n    },\n    textSpace: {\n      height: 8,\n      minHeight: 8\n    },\n    textDescription: {\n      fontSize: 12,\n      fontWeight: 800\n    },\n    textValue: {\n      fontSize: 16,\n      fontWeight: 'normal'\n    }\n  }),\n);\n\ninterface ILocalProps {\n  selectedAircraft?: IAircraftTrack;\n  onRelease?: (icao24: string) => void;\n}\ntype Props = ILocalProps;\n\nconst AircraftInfoOverlay: React.FC<Props> = (props) => {\n\n  // External hooks\n  const classes = useStyles();\n  const theme = useTheme();\n\n  // States\n  const [lastPositionPastSeconds, setLastPositionPastSeconds] = useState(0);\n\n  // Refs\n  const updateIntverlIDRef = useRef(0);\n  const lastPositionPastSecondsRef = useRef(lastPositionPastSeconds);\n  lastPositionPastSecondsRef.current = lastPositionPastSeconds;\n\n  // Effects\n  useEffect(() => {\n\n    // Mount\n\n    // Unmount\n    return () => {\n\n      clearInterval(updateIntverlIDRef.current);\n    }\n  }, []);\n  useEffect(() => {\n\n    if (!props.selectedAircraft || !props.selectedAircraft.stateVector) {\n\n      clearInterval(updateIntverlIDRef.current);\n      return;\n    }\n\n    clearInterval(updateIntverlIDRef.current);\n\n    const lastPositionSeconds = props.selectedAircraft.stateVector.time_position ? props.selectedAircraft.stateVector.time_position : Math.floor(Date.now() / 1000);\n    setLastPositionPastSeconds(Math.floor(Date.now() / 1000) - lastPositionSeconds);\n\n    updateIntverlIDRef.current = window.setInterval(handleUpdate, 1000);\n\n  }, [props.selectedAircraft?.stateVector]);\n\n  const handleUpdate = () => {\n\n    setLastPositionPastSeconds(lastPositionPastSecondsRef.current + 1);\n  };\n\n  const renderHeader = () => {\n\n    if (!props.selectedAircraft)\n      return undefined;\n\n    if (!props.selectedAircraft.stateVector)\n      return undefined;\n\n    const stateVector = props.selectedAircraft.stateVector;\n\n    // Get altitude\n    var altitude = stateVector.geo_altitude;\n    if ((altitude === null) || (altitude < 0))\n      altitude = stateVector.baro_altitude;\n    if ((altitude === null) || (altitude < 0))\n      altitude = 0;\n\n    // Get vertical rate\n    const verticalRate = stateVector.vertical_rate ? stateVector.vertical_rate : 0;\n\n    // Get true track\n    const trueTrack = stateVector.true_track ? stateVector.true_track : 0.0;\n\n    const FlightIcon = getIcon(stateVector.on_ground, verticalRate, altitude);\n\n    return (\n\n      <React.Fragment>\n\n        <div className={classes.headerContainer}>\n\n          <div className={classes.headerIconContainer}>\n            <FlightIcon\n              className={classes.headerIcon}\n              style={{\n                transform: `rotate(${getRotation(trueTrack, verticalRate, altitude)}deg)`,\n              }} />\n          </div>\n\n          <div className={classes.headerTextContainer}>\n            <div className={classes.headerText1}>\n              {stateVector.callsign ? stateVector.callsign : '?'}\n            </div>\n            <div className={classes.headerText2}>\n              {stateVector.origin_country}\n            </div>\n          </div>\n\n          <IconButton\n            aria-label=\"close\"\n            onClick={() => {\n\n              if (!props.selectedAircraft)\n                return;\n\n              if (!props.selectedAircraft.stateVector)\n                return undefined;\n\n              if (props.onRelease)\n                props.onRelease(props.selectedAircraft.stateVector.icao24)\n            }}>\n            <CloseIcon color='error' />\n          </IconButton>\n\n        </div>\n\n      </React.Fragment>\n    );\n  };\n\n  const renderFlightData = () => {\n\n    if (!props.selectedAircraft)\n      return undefined;\n\n    if (!props.selectedAircraft.stateVector)\n      return undefined;\n\n    const stateVector = props.selectedAircraft.stateVector;\n\n    var options = {\n      year: 'numeric', month: 'numeric', day: 'numeric',\n      hour: 'numeric', minute: 'numeric', second: 'numeric'\n    };\n\n    var lastPositionTime = '?';\n    if (stateVector.time_position !== null) {\n\n      var date = new Date(stateVector.time_position * 1000);\n      lastPositionTime = new Intl.DateTimeFormat('de-CH', options).format(date)\n    }\n\n    var lastContactTime = '?';\n    if (stateVector.last_contact !== null) {\n\n      var lastContactDate = new Date(stateVector.last_contact * 1000);\n      lastContactTime = new Intl.DateTimeFormat('de-CH', options).format(lastContactDate)\n    }\n\n    // Get altitude\n    const barometricAltitude = stateVector.baro_altitude ? stateVector.baro_altitude : 0;\n    const geometricAltitude = stateVector.geo_altitude ? stateVector.geo_altitude : 0;\n    var altitude = stateVector.geo_altitude;\n    if ((altitude === null) || (altitude < 0))\n      altitude = stateVector.baro_altitude;\n    if ((altitude === null) || (altitude < 0))\n      altitude = 0;\n\n    // Get velocity\n    const velocity = stateVector.velocity ? stateVector.velocity : -1;\n\n    // Get vertical rate\n    const verticalRate = stateVector.vertical_rate ? stateVector.vertical_rate : 0.0;\n\n    // Get true track\n    const trueTrack = stateVector.true_track ? stateVector.true_track : 0.0;\n\n    return (\n\n      <React.Fragment>\n\n        <div className={classes.textContainer}>\n          <div className={classes.textDescription}>\n            {'Last contact'}\n          </div>\n          <div className={classes.textValue}>\n            {`${lastContactTime} [${lastPositionPastSeconds.toString()}s]`}\n          </div>\n        </div>\n\n        <div className={classes.textSpace} />\n\n        <div className={classes.textContainer}>\n          <div className={classes.textDescription}>\n            {'Last position update'}\n          </div>\n          <div className={classes.textValue}>\n            {`${lastPositionTime} [${lastPositionPastSeconds.toString()}s]`}\n          </div>\n        </div>\n\n        <div className={classes.textSpace} />\n\n        <div className={classes.textContainer}>\n          <div className={classes.textDescription}>\n            {'Barometric altitude'}\n          </div>\n          <div className={classes.textValue}>\n            {`${getFormattedValue(barometricAltitude, 1)} m [${getFormattedValue(barometricAltitude * 3.28084, 1)} ft.]`}\n          </div>\n        </div>\n\n        <div className={classes.textSpace} />\n\n        <div className={classes.textContainer}>\n          <div className={classes.textDescription}>\n            {'Geometric altitude'}\n          </div>\n          <div className={classes.textValue}>\n            {`${getFormattedValue(geometricAltitude, 1)} m [${getFormattedValue(geometricAltitude * 3.28084, 1)} ft.]`}\n          </div>\n        </div>\n\n        <div className={classes.textSpace} />\n\n        <div className={classes.textContainer}>\n          <div className={classes.textDescription}>\n            {'Velocity'}\n          </div>\n          <div className={classes.textValue}>\n            {`${getFormattedValue(velocity * 3.6, 1)} km/h [${getFormattedValue(velocity, 1)} m/s]`}\n          </div>\n        </div>\n\n        <div className={classes.textSpace} />\n\n        <div className={classes.textContainer}>\n          <div className={classes.textDescription}>\n            {'Longitude / Latitude'}\n          </div>\n          <div className={classes.textValue}>\n            {`${getFormattedValue(stateVector.longitude ? stateVector.longitude : -1, 3)} ° / ${getFormattedValue(stateVector.latitude ? stateVector.latitude : -1, 3)} °`}\n          </div>\n        </div>\n\n        <div className={classes.textSpace} />\n\n        <div className={classes.textContainer}>\n          <div className={classes.textDescription}>\n            {'Rotation'}\n          </div>\n          <div className={classes.textValue}>\n            {`${getFormattedValue(trueTrack, 1)} °`}\n          </div>\n        </div>\n\n        <div className={classes.textSpace} />\n\n        <div className={classes.textContainer}>\n          <div className={classes.textDescription}>\n            {'Vertical rate'}\n          </div>\n          <div className={classes.textValue}>\n            {`${getFormattedValue(verticalRate, 1)} m/s`}\n          </div>\n        </div>\n\n        <div className={classes.textSpace} />\n\n        <div className={classes.textContainer}>\n          <div className={classes.textDescription}>\n            {'Status'}\n          </div>\n          <div className={classes.textValue}>\n            {getStatusText(stateVector.on_ground, verticalRate, altitude)}\n          </div>\n        </div>\n\n        <div className={classes.textSpace} />\n\n        <div className={classes.textContainer}>\n          <div className={classes.textDescription}>\n            {'ICAO24'}\n          </div>\n          <div className={classes.textValue}>\n            {stateVector.icao24}\n          </div>\n        </div>\n\n        <div className={classes.textSpace} />\n\n        <div className={classes.textContainer}>\n          <div className={classes.textDescription}>\n            {'Transpondercode [Squawk]'}\n          </div>\n          <div className={classes.textValue}>\n            {stateVector.squawk ? stateVector.squawk : -1}\n          </div>\n        </div>\n\n      </React.Fragment>\n    );\n  };\n\n  if (!props.selectedAircraft)\n    return (\n      <div className={classes.overlayIndicatorRoot}>\n        <Indicator1\n          color={theme.palette.primary.main} />\n      </div>\n    );\n\n  return (\n\n    <div className={classes.overlayRoot}>\n      {renderHeader()}\n      <div className={classes.headerLine} />\n      {renderFlightData()}\n    </div>\n  );\n}\n\nexport default AircraftInfoOverlay;","C:\\Data\\GitHub\\react-flight-tracker\\src\\components\\FlightMap.tsx",["127"],"C:\\Data\\GitHub\\react-flight-tracker\\src\\index.tsx",[],["128","129"],"C:\\Data\\GitHub\\react-flight-tracker\\src\\pages\\ErrorPage.tsx",[],["130","131"],"C:\\Data\\GitHub\\react-flight-tracker\\src\\helpers\\aircraftDataFunctions.ts",["132","133"],"import { ReactComponent as FlightIcon } from './../resources/flight-24px.svg';\nimport { ReactComponent as FlightLandIcon } from './../resources/flight_land-24px.svg';\nimport { ReactComponent as FlightLandFlippedIcon } from './../resources/flight_land-24px_flippedx.svg';\nimport { ReactComponent as FlightTakeoffIcon } from './../resources/flight_takeoff-24px.svg';\nimport { ReactComponent as FlightTakeoffFlippedIcon } from './../resources/flight_takeoff-24px_flippedx.svg';\n\nconst altitudeStateLimit = 1000;\n\nexport const getFormattedValue = (rawValue: number, maxFractionDigits: number) => {\n\n  const NumberFormatter = new Intl.NumberFormat('de-CH', { style: 'decimal', useGrouping: false, maximumFractionDigits: maxFractionDigits });\n  return NumberFormatter.format(rawValue);\n};\n\nexport const getIconName = (isOnGround: boolean, verticalRate: number, altitude: number, trueTrack: number): string => {\n\n  if (isOnGround)\n    return 'flight-icon';\n\n  if (altitude <= 0)\n    return 'flight-icon';\n\n  if (verticalRate > 0 && altitude < altitudeStateLimit)\n    if (trueTrack < 180)\n      return 'flight-takeoff-icon';\n    else\n      return 'flight-takeoff-flipped-icon';\n\n  if (verticalRate < 0 && altitude < altitudeStateLimit)\n    if (trueTrack < 180)\n      return 'flight-land-icon';\n    else\n      return 'flight-land-flipped-icon';\n\n  return 'flight-icon';\n};\n\nexport const getIcon = (isOnGround: boolean, verticalRate: number, altitude: number) => {\n\n  if (isOnGround)\n    return FlightIcon;\n\n  if (altitude <= 0)\n    return FlightIcon;\n\n  if (verticalRate > 0 && altitude < altitudeStateLimit)\n    return FlightTakeoffIcon;\n\n  if (verticalRate < 0 && altitude < altitudeStateLimit)\n    return FlightLandIcon;\n\n  return FlightIcon;\n};\n\nexport const getRotation = (trueTrack: number, verticalRate: number, altitude: number) => {\n\n  if (verticalRate > 0 && altitude < altitudeStateLimit)\n    return 0.0;\n\n  if (verticalRate < 0 && altitude < altitudeStateLimit)\n    return 0.0;\n\n  return trueTrack;\n};\n\nexport const getColor = (altitude: number) => {\n\n  var percent = altitude / 13000 * 100;\n  if (percent > 100)\n    percent = 100;\n  if (percent < 0)\n    percent = 0;\n\n  var r, g, b = 0;\n  if (percent < 50) {\n    r = 255;\n    g = Math.round(5.1 * percent);\n  }\n  else {\n    g = 255;\n    r = Math.round(510 - 5.10 * percent);\n  }\n\n  var h = r * 0x10000 + g * 0x100 + b * 0x1;\n\n  return '#' + ('000000' + h.toString(16)).slice(-6);\n};\n\nexport const getStatusText = (isOnGround: boolean, verticalRate: number, altitude: number): string => {\n\n  if (isOnGround)\n    return 'On Ground';\n\n  if (altitude <= 0)\n    return 'On Ground';\n\n  if (verticalRate > 0 && altitude < altitudeStateLimit)\n    return 'Taking off';\n\n  if (verticalRate < 0 && altitude < altitudeStateLimit)\n    return 'Landing';\n\n  return 'On Track';\n};\n","C:\\Data\\GitHub\\react-flight-tracker\\src\\views\\index.ts",[],"C:\\Data\\GitHub\\react-flight-tracker\\src\\views\\MapView.tsx",["134"],"import React, { useState, useContext, useRef, useEffect } from 'react';\nimport { ViewportProps } from 'react-map-gl';\nimport { ServiceContext, ViewContainer } from '@daniel.neuweiler/react-lib-module';\n\nimport { ViewKeys } from './navigation';\nimport { IOpenSkyAPIService } from './../services';\nimport { IStateVectorData, IAircraftTrack, IMapGeoBounds } from './../opensky';\nimport FlightMap from './../components/FlightMap';\n\ninterface ILocalProps {\n}\ntype Props = ILocalProps;\n\nconst MapView: React.FC<Props> = (props) => {\n\n  // Fields\n  const contextName: string = ViewKeys.MapView;\n\n  // States\n  const [stateVectors, setStateVectors] = useState<IStateVectorData>({ time: Date.now(), states: [] });\n  const [trackedAircraft, setTrackedAircraft] = useState<IAircraftTrack | undefined>(undefined);\n\n  // Contexts\n  const serviceContext = useContext(ServiceContext)\n  const openSkyAPIService = serviceContext.getService<IOpenSkyAPIService>('OpenSkyAPIService');\n\n  // Refs\n  const stateVectorsSubscriptionRef = useRef<string>('');\n  const aircraftTrackSubscriptionRef = useRef<string>('');\n\n  // Effects\n  useEffect(() => {\n\n    // Mount\n    if (openSkyAPIService) {\n\n      // Get a register key for the subscription and save it as reference\n      var registerKey = openSkyAPIService.onStateVectorsUpdated(contextName, handleStateVectorsUpdated);\n      stateVectorsSubscriptionRef.current = registerKey;\n\n      registerKey = openSkyAPIService.onAircraftTrackUpdated(contextName, handleAircraftTrackUpdated);\n      aircraftTrackSubscriptionRef.current = registerKey;\n    }\n\n    // Unmount\n    return () => {\n\n      if (openSkyAPIService) {\n\n        // Get the register key from the reference to unsubscribe\n        var registerKey = stateVectorsSubscriptionRef.current;\n        openSkyAPIService.offStateVectorsUpdated(registerKey);\n\n        registerKey = aircraftTrackSubscriptionRef.current;\n        openSkyAPIService.offAircraftTrackUpdated(registerKey);\n      }\n    }\n  }, []);\n\n  const handleStateVectorsUpdated = (data: IStateVectorData) => {\n\n    setStateVectors(data);\n  };\n\n  const handleAircraftTrackUpdated = (data: IAircraftTrack) => {\n\n    setTrackedAircraft(data);\n  };\n\n  const handleMapChange = (viewState: ViewportProps, geoBounds: IMapGeoBounds) => {\n\n    if (openSkyAPIService)\n      openSkyAPIService.geoBounds = geoBounds;\n  };\n\n  const handleTrackAircraft = (icao24: string) => {\n\n    if (openSkyAPIService)\n      openSkyAPIService.trackAircraft(icao24);\n\n    setTrackedAircraft(undefined);\n  };\n\n  const handleReleaseTrack = (icao24: string) => {\n\n    if (openSkyAPIService)\n      openSkyAPIService.releaseTrack(icao24);\n\n    setTrackedAircraft(undefined);\n  };\n\n  return (\n\n    <ViewContainer\n      isScrollLocked={true}>\n\n      <FlightMap\n        stateVectors={stateVectors}\n        selectedAircraft={trackedAircraft}\n        onMapChange={handleMapChange}\n        onTrackAircraft={handleTrackAircraft}\n        onReleaseTrack={handleReleaseTrack} />\n    </ViewContainer>\n  );\n}\n\nexport default MapView;\n","C:\\Data\\GitHub\\react-flight-tracker\\src\\pages\\RouterPage.tsx",["135","136"],"C:\\Data\\GitHub\\react-flight-tracker\\src\\views\\navigation.ts",[],"C:\\Data\\GitHub\\react-flight-tracker\\src\\mapbox\\constants.ts",[],"C:\\Data\\GitHub\\react-flight-tracker\\src\\opensky\\index.ts",[],"C:\\Data\\GitHub\\react-flight-tracker\\src\\dialogs\\ViewInjectorDialog.tsx",["137","138","139","140","141"],"C:\\Data\\GitHub\\react-flight-tracker\\src\\views\\SettingsView.tsx",["142"],"C:\\Data\\GitHub\\react-flight-tracker\\src\\pages\\ContextPage.tsx",["143","144","145"],"C:\\Data\\GitHub\\react-flight-tracker\\src\\services\\index.ts",[],{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","severity":1,"message":"151","line":4,"column":3,"nodeType":"152","messageId":"153","endLine":4,"endColumn":18},{"ruleId":"150","severity":1,"message":"154","line":11,"column":7,"nodeType":"152","messageId":"153","endLine":11,"endColumn":31},{"ruleId":"146","replacedBy":"155"},{"ruleId":"148","replacedBy":"156"},{"ruleId":"146","replacedBy":"157"},{"ruleId":"148","replacedBy":"158"},{"ruleId":"146","replacedBy":"159"},{"ruleId":"148","replacedBy":"160"},{"ruleId":"150","severity":1,"message":"161","line":5,"column":28,"nodeType":"152","messageId":"153","endLine":5,"endColumn":42},{"ruleId":"150","severity":1,"message":"162","line":5,"column":44,"nodeType":"152","messageId":"153","endLine":5,"endColumn":56},{"ruleId":"163","severity":1,"message":"164","line":140,"column":9,"nodeType":"165","messageId":"166","endLine":140,"endColumn":39,"fix":"167"},{"ruleId":"146","replacedBy":"168"},{"ruleId":"148","replacedBy":"169"},{"ruleId":"150","severity":1,"message":"162","line":8,"column":26,"nodeType":"152","messageId":"153","endLine":8,"endColumn":38},{"ruleId":"170","severity":1,"message":"171","line":154,"column":6,"nodeType":"172","endLine":154,"endColumn":43,"suggestions":"173"},{"ruleId":"170","severity":1,"message":"174","line":83,"column":6,"nodeType":"172","endLine":83,"endColumn":22,"suggestions":"175"},{"ruleId":"146","replacedBy":"176"},{"ruleId":"148","replacedBy":"177"},{"ruleId":"146","replacedBy":"178"},{"ruleId":"148","replacedBy":"179"},{"ruleId":"150","severity":1,"message":"180","line":3,"column":28,"nodeType":"152","messageId":"153","endLine":3,"endColumn":49},{"ruleId":"150","severity":1,"message":"181","line":5,"column":28,"nodeType":"152","messageId":"153","endLine":5,"endColumn":52},{"ruleId":"170","severity":1,"message":"182","line":58,"column":6,"nodeType":"172","endLine":58,"endColumn":8,"suggestions":"183"},{"ruleId":"150","severity":1,"message":"184","line":61,"column":31,"nodeType":"152","messageId":"153","endLine":61,"endColumn":53},{"ruleId":"170","severity":1,"message":"185","line":93,"column":6,"nodeType":"172","endLine":93,"endColumn":8,"suggestions":"186"},{"ruleId":"150","severity":1,"message":"187","line":1,"column":27,"nodeType":"152","messageId":"153","endLine":1,"endColumn":37},{"ruleId":"150","severity":1,"message":"188","line":1,"column":50,"nodeType":"152","messageId":"153","endLine":1,"endColumn":57},{"ruleId":"150","severity":1,"message":"189","line":1,"column":59,"nodeType":"152","messageId":"153","endLine":1,"endColumn":67},{"ruleId":"150","severity":1,"message":"190","line":2,"column":43,"nodeType":"152","messageId":"153","endLine":2,"endColumn":51},{"ruleId":"150","severity":1,"message":"191","line":11,"column":34,"nodeType":"152","messageId":"153","endLine":11,"endColumn":42},{"ruleId":"150","severity":1,"message":"192","line":29,"column":9,"nodeType":"152","messageId":"153","endLine":29,"endColumn":28},{"ruleId":"150","severity":1,"message":"192","line":22,"column":9,"nodeType":"152","messageId":"153","endLine":22,"endColumn":28},{"ruleId":"150","severity":1,"message":"193","line":25,"column":10,"nodeType":"152","messageId":"153","endLine":25,"endColumn":35},{"ruleId":"150","severity":1,"message":"194","line":25,"column":37,"nodeType":"152","messageId":"153","endLine":25,"endColumn":63},"no-native-reassign",["195"],"no-negated-in-lhs",["196"],"@typescript-eslint/no-unused-vars","'IAircraftFlight' is defined but never used.","Identifier","unusedVar","'metadataInterval' is assigned a value but never used.",["195"],["196"],["195"],["196"],["195"],["196"],"'IAircraftTrack' is defined but never used.","'IStateVector' is defined but never used.","no-useless-computed-key","Unnecessarily computed property ['icao24'] found.","Property","unnecessarilyComputedProperty",{"range":"197","text":"198"},["195"],["196"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.selectedAircraft'. Either include it or remove the dependency array.","ArrayExpression",["199"],"React Hook useEffect has missing dependencies: 'props' and 'viewportProps'. Either include them or remove the dependency array. Mutable values like 'mapRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["200"],["195"],["196"],["195"],["196"],"'FlightLandFlippedIcon' is defined but never used.","'FlightTakeoffFlippedIcon' is defined but never used.","React Hook useEffect has missing dependencies: 'contextName' and 'openSkyAPIService'. Either include them or remove the dependency array.",["201"],"'setSelectableMenuItems' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handleNavigationRequest' and 'navigationService'. Either include them or remove the dependency array.",["202"],"'useContext' is defined but never used.","'useMemo' is defined but never used.","'Suspense' is defined but never used.","'useTheme' is defined but never used.","'ViewKeys' is defined but never used.","'contextName' is assigned a value but never used.","'isFlightCountVisibleOnMap' is assigned a value but never used.","'setFlightCountVisibleOnMap' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[5354,5364],"'icao24'",{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},{"desc":"209","fix":"210"},"Update the dependencies array to be: [props.selectedAircraft, props.selectedAircraft.stateVector]",{"range":"211","text":"212"},"Update the dependencies array to be: [props, viewportProps]",{"range":"213","text":"214"},"Update the dependencies array to be: [contextName, openSkyAPIService]",{"range":"215","text":"216"},"Update the dependencies array to be: [handleNavigationRequest, navigationService]",{"range":"217","text":"218"},[3847,3884],"[props.selectedAircraft, props.selectedAircraft.stateVector]",[2571,2587],"[props, viewportProps]",[1979,1981],"[contextName, openSkyAPIService]",[2959,2961],"[handleNavigationRequest, navigationService]"]