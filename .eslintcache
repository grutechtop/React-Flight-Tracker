[{"C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\pages\\App.tsx":"1","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\services\\geospatialService.ts":"2","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\views\\navigation.ts":"3","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\dialogs\\ViewInjectorDialog.tsx":"4","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\views\\LogView.tsx":"5","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\views\\SettingsView.tsx":"6","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\index.tsx":"7","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\pages\\StartPage.tsx":"8","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\mapbox\\constants.ts":"9","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\opensky\\index.ts":"10","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\views\\index.ts":"11","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\components\\DataOverlay.tsx":"12","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\serviceWorker.ts":"13","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\helpers\\aircraftDataFunctions.ts":"14","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\opensky\\types.ts":"15","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\components\\FlightMap.tsx":"16","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\components\\LogOverlay.tsx":"17","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\mapbox\\index.ts":"18","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\pages\\ErrorPage.tsx":"19","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\helpers\\index.ts":"20","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\opensky\\constants.ts":"21","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\services\\index.ts":"22"},{"size":2263,"mtime":1608230318903,"results":"23","hashOfConfig":"24"},{"size":5911,"mtime":1606856584711,"results":"25","hashOfConfig":"24"},{"size":1735,"mtime":1608230318974,"results":"26","hashOfConfig":"24"},{"size":3234,"mtime":1608237192658,"results":"27","hashOfConfig":"24"},{"size":665,"mtime":1608236923350,"results":"28","hashOfConfig":"24"},{"size":2816,"mtime":1608242727635,"results":"29","hashOfConfig":"24"},{"size":436,"mtime":1583393386437,"results":"30","hashOfConfig":"24"},{"size":2682,"mtime":1608230318922,"results":"31","hashOfConfig":"24"},{"size":154,"mtime":1583783136512,"results":"32","hashOfConfig":"24"},{"size":56,"mtime":1583878514312,"results":"33","hashOfConfig":"24"},{"size":116,"mtime":1608230318969,"results":"34","hashOfConfig":"24"},{"size":1401,"mtime":1608242907330,"results":"35","hashOfConfig":"24"},{"size":5295,"mtime":499162500000,"results":"36","hashOfConfig":"24"},{"size":2923,"mtime":1584386632227,"results":"37","hashOfConfig":"24"},{"size":4244,"mtime":1584305321758,"results":"38","hashOfConfig":"24"},{"size":7099,"mtime":1608244644320,"results":"39","hashOfConfig":"24"},{"size":2532,"mtime":1608244156222,"results":"40","hashOfConfig":"24"},{"size":30,"mtime":1583606887624,"results":"41","hashOfConfig":"24"},{"size":1194,"mtime":1608230318912,"results":"42","hashOfConfig":"24"},{"size":40,"mtime":1584134872380,"results":"43","hashOfConfig":"24"},{"size":482,"mtime":1584189982443,"results":"44","hashOfConfig":"24"},{"size":76,"mtime":1584092716635,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1gatkn",{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"51","usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"69"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"69"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\pages\\App.tsx",[],["104","105"],"C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\services\\geospatialService.ts",["106","107","108"],"import { IService, Service, IResponse, createResponse, ResponseStateEnumeration } from '@daniel.neuweiler/ts-lib-module';\r\nimport { Feature, GeoJsonProperties, Point } from 'geojson';\r\nimport destination from '@turf/destination';\r\n\r\nimport { IStateVectorData, IAircraftTrack, IStateVector } from '../opensky';\r\n\r\n// Earth radius in meters\r\nconst earthRadius = 6371008.8;\r\n\r\nexport type PathPredictionUpdatedCallbackMethod = (destinations: Array<Feature<Point, GeoJsonProperties>>) => void;\r\ninterface IPathPredictionUpdatedSubscriberDictionary { [key: string]: PathPredictionUpdatedCallbackMethod };\r\n\r\nexport interface IGeospatialService extends IService {\r\n  restartPathPrediction: (stateVectors: IStateVectorData) => void;\r\n  stopPathPrediction: () => void;\r\n  onPathPredictionUpdated: (contextKey: string, callbackHandler: PathPredictionUpdatedCallbackMethod) => string;\r\n  offPathPredictionUpdated: (registerKey: string) => boolean;\r\n};\r\n\r\nexport class GeospatialService extends Service implements IGeospatialService {\r\n\r\n  // Props\r\n  private pathPredictionInterval: number = 100;\r\n  private pathPredictionCounter: number = 0;\r\n  private pathPredictionIntervalID: number = 0;\r\n  private pathPredictionUpdatedSubscriberDictionary: IPathPredictionUpdatedSubscriberDictionary = {};\r\n  private pathPredictionUpdatedSubscriptionCounter: number = 0;\r\n\r\n  constructor() {\r\n    super('GeospatialService');\r\n\r\n  };\r\n\r\n  public restartPathPrediction = (stateVectors: IStateVectorData) => {\r\n\r\n    clearInterval(this.pathPredictionIntervalID);\r\n    this.pathPredictionCounter = 0;\r\n    this.pathPredictionIntervalID = window.setInterval(this.calculatePath, this.pathPredictionInterval, stateVectors);\r\n  };\r\n\r\n  public stopPathPrediction = () => {\r\n\r\n    clearInterval(this.pathPredictionIntervalID);\r\n  };\r\n\r\n  public onPathPredictionUpdated = (contextKey: string, callbackHandler: PathPredictionUpdatedCallbackMethod) => {\r\n\r\n    // Setup register key\r\n    this.pathPredictionUpdatedSubscriptionCounter++;\r\n    const registerKey = `${contextKey}_${this.pathPredictionUpdatedSubscriptionCounter}`\r\n\r\n    // Register callback\r\n    this.pathPredictionUpdatedSubscriberDictionary[registerKey] = callbackHandler;\r\n    this.logger.debug(`Component with key '${registerKey}' has subscribed on 'PathPredictionUpdated'.`);\r\n    this.logger.debug(`'${Object.entries(this.pathPredictionUpdatedSubscriberDictionary).length}' subscribers on 'PathPredictionUpdated'.`);\r\n\r\n    return registerKey;\r\n  };\r\n\r\n  public offPathPredictionUpdated = (registerKey: string) => {\r\n\r\n    // Delete callback\r\n    var existingSubscriber = Object.entries(this.pathPredictionUpdatedSubscriberDictionary).find(([key, value]) => key === registerKey);\r\n    if (existingSubscriber) {\r\n\r\n      delete this.pathPredictionUpdatedSubscriberDictionary[registerKey];\r\n      this.logger.debug(`Component with key '${registerKey}' has unsubscribed on 'PathPredictionUpdated'.`);\r\n      this.logger.debug(`'${Object.entries(this.pathPredictionUpdatedSubscriberDictionary).length}' subscribers on 'PathPredictionUpdated'.`);\r\n\r\n      return true;\r\n    }\r\n    else {\r\n\r\n      this.logger.error(`Component with key '${registerKey}' not registered on 'PathPredictionUpdated'.`);\r\n      this.logger.debug(`'${Object.entries(this.pathPredictionUpdatedSubscriberDictionary).length}' subscribers on 'PathPredictionUpdated'.`);\r\n\r\n      return false;\r\n    };\r\n  };\r\n\r\n  protected async onStarting(): Promise<IResponse<boolean>> {\r\n    return createResponse<boolean>(true, ResponseStateEnumeration.OK, []);\r\n  };\r\n\r\n  protected async onStopping(): Promise<IResponse<boolean>> {\r\n\r\n    clearInterval(this.pathPredictionIntervalID);\r\n\r\n    return createResponse<boolean>(true, ResponseStateEnumeration.OK, []);\r\n  };\r\n\r\n  private calculatePath = (stateVectors: IStateVectorData) => {\r\n\r\n    const features: Array<Feature<Point, GeoJsonProperties>> = [];\r\n\r\n    for (var stateVector of stateVectors.states) {\r\n\r\n      // Setup last position time in ms\r\n      var lastPositionTime = this.pathPredictionCounter\r\n\r\n      // Setup altitude in m\r\n      var altitude = stateVector.geo_altitude;\r\n      if ((altitude === null) || (altitude < 0))\r\n        altitude = stateVector.baro_altitude;\r\n      if ((altitude === null) || (altitude < 0))\r\n        altitude = 0;\r\n\r\n      // Setup vertical rate\r\n      var verticalRate = stateVector.vertical_rate ? stateVector.vertical_rate : 0.0;\r\n      if (verticalRate < 0)\r\n        verticalRate *= -1;\r\n\r\n      const origin: Array<number> = [stateVector.longitude ? stateVector.longitude : 0, stateVector.latitude ? stateVector.latitude : 0]\r\n      const velocity = stateVector.velocity ? stateVector.velocity : 0;\r\n\r\n      var distance = (velocity * lastPositionTime) / 1000;\r\n\r\n      // Try to adjust the distance to the vertical rate\r\n      if (verticalRate !== 0)\r\n        distance = distance - (verticalRate * (lastPositionTime / 1000));\r\n\r\n      // Try to adjust the distance to the altitude\r\n      if (altitude > 0)\r\n        distance = (distance * earthRadius) / (earthRadius + altitude);\r\n\r\n      const bearing = stateVector.true_track ? stateVector.true_track : 0;\r\n\r\n      // Calculate the destination\r\n      const feature = destination(\r\n        origin,\r\n        distance,\r\n        bearing,\r\n        {\r\n          units: \"meters\"\r\n        }\r\n      );\r\n\r\n      // Adding the ICAO24 prop to the feature so that a corresponding assignment is possible later\r\n      var properties: GeoJsonProperties = {\r\n        ['icao24']: stateVector.icao24\r\n      };\r\n      feature.properties = properties;\r\n\r\n      // Push the feature to the collection\r\n      features.push(feature);\r\n    }\r\n\r\n    // Increase counter time\r\n    this.pathPredictionCounter += this.pathPredictionInterval;\r\n\r\n    // Execute callbacks\r\n    Object.entries(this.pathPredictionUpdatedSubscriberDictionary).forEach(([key, value], index) => value(features))\r\n  };\r\n}\r\n",["109","110"],"C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\views\\navigation.ts",[],"C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\dialogs\\ViewInjectorDialog.tsx",["111","112","113","114","115"],"import React, { useState, useContext, useEffect, useMemo, Suspense } from 'react';\r\nimport { createStyles, makeStyles, Theme, useTheme } from '@material-ui/core/styles';\r\nimport { DefaultStyle } from '@daniel.neuweiler/ts-lib-module';\r\nimport { INavigationElementProps, ViewInjector } from '@daniel.neuweiler/react-lib-module';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport { ViewNavigationElements, ViewKeys } from './../views/navigation';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    dialogPaper: {\r\n      height: '70%',\r\n      backgroundColor: DefaultStyle.Palette.backgoundDark,\r\n      color: DefaultStyle.Palette.contrast2Dark\r\n    },\r\n    dialogHeaderRoot: {\r\n      backgroundColor: theme.palette.primary.main,\r\n      color: theme.palette.primary.contrastText\r\n    },\r\n    dialogHeaderContainer: {\r\n      margin: theme.spacing(1),\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n      alignContent: 'center',\r\n      alignItems: 'center'\r\n    },\r\n    dialogContentContainer: {\r\n      margin: theme.spacing(1),\r\n      height: '100%',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      overflow: 'hidden'\r\n    }\r\n  }),\r\n);\r\n\r\ninterface ILocalProps {\r\n  isVisible: boolean;\r\n  navigationElement: INavigationElementProps;\r\n  onClose: () => void;\r\n}\r\ntype Props = ILocalProps;\r\n\r\nconst ViewInjectorDialog: React.FC<Props> = (props) => {\r\n\r\n  // External hooks\r\n  const classes = useStyles();\r\n\r\n  // States\r\n  const [selectedNavigationElement, setSelectedNavigationElement] = useState<INavigationElementProps>(props.navigationElement);\r\n\r\n  // Effects\r\n  useEffect(() => {\r\n\r\n    const navigationElement = Object.entries(ViewNavigationElements).find(([key, navigationElement]) => navigationElement.key === props.navigationElement.key);\r\n    if (navigationElement)\r\n      setSelectedNavigationElement(navigationElement[1]);\r\n\r\n  }, [props.navigationElement]);\r\n\r\n  const renderHeader = () => {\r\n\r\n    return (\r\n\r\n      <div className={classes.dialogHeaderRoot}>\r\n\r\n        <div className={classes.dialogHeaderContainer}>\r\n\r\n          <Typography\r\n            variant={'h5'}>\r\n            {selectedNavigationElement.display.value}\r\n          </Typography>\r\n\r\n          <div style={{ flex: 'auto' }} />\r\n\r\n          <IconButton\r\n            color={'inherit'}\r\n            aria-label=\"Close\"\r\n            onClick={(e) => props.onClose()}>\r\n\r\n            <CloseIcon />\r\n          </IconButton>\r\n\r\n        </div>\r\n      </div>\r\n    )\r\n  };\r\n\r\n  return (\r\n\r\n    <Dialog\r\n      classes={{\r\n        paper: classes.dialogPaper,\r\n      }}\r\n      fullWidth={true}\r\n      maxWidth='sm'\r\n      open={props.isVisible}\r\n      onClose={(e, reason) => props.onClose()}>\r\n\r\n      {renderHeader()}\r\n\r\n      <div className={classes.dialogContentContainer}>\r\n\r\n        <ViewInjector\r\n          navigationElement={selectedNavigationElement}\r\n          onImportView={navigationElement => React.lazy(() => import(`./../${navigationElement.importPath}`))} />\r\n      </div>\r\n\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport default ViewInjectorDialog;\r\n",["116","117"],"C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\views\\LogView.tsx",["118"],"C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\views\\SettingsView.tsx",["119"],"C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\index.tsx",[],"C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\pages\\StartPage.tsx",[],"C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\mapbox\\constants.ts",[],["120","121"],"C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\opensky\\index.ts",[],"C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\views\\index.ts",[],"C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\components\\DataOverlay.tsx",["122"],"import React from 'react';\r\nimport { createStyles, makeStyles, Theme, useTheme } from '@material-ui/core/styles';\r\nimport { IStateVectorData } from '../opensky';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    overlayRoot: {\r\n      position: 'relative',\r\n      width: 160,\r\n      height: 116,\r\n      backgroundColor: theme.palette.grey[500],\r\n      color: theme.palette.grey[900],\r\n      borderRadius: 4,\r\n      opacity: 0.9,\r\n      padding: theme.spacing(1)\r\n    },\r\n    content: {\r\n      height: '100%',\r\n      width: '100%',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'flex-start',\r\n      alignContent: 'flex-start',\r\n    },\r\n    textDescription: {\r\n      ...theme.typography.body1,\r\n    },\r\n    textValue: {\r\n      ...theme.typography.h6,\r\n    }\r\n  }),\r\n);\r\n\r\ninterface ILocalProps {\r\n  stateVectors: IStateVectorData;\r\n}\r\ntype Props = ILocalProps;\r\n\r\nconst DataOverlay: React.FC<Props> = (props) => {\r\n\r\n  // External hooks\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.overlayRoot}>\r\n\r\n      <div className={classes.content}>\r\n        <div className={classes.textDescription}>\r\n          {'Visible flights'}\r\n        </div>\r\n        <div className={classes.textValue}>\r\n          {props.stateVectors.states.length.toString()}\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DataOverlay;",["123","124"],"C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\serviceWorker.ts",[],["125","126"],"C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\helpers\\aircraftDataFunctions.ts",["127","128"],"import { ReactComponent as FlightIcon } from './../resources/flight-24px.svg';\r\nimport { ReactComponent as FlightLandIcon } from './../resources/flight_land-24px.svg';\r\nimport { ReactComponent as FlightLandFlippedIcon } from './../resources/flight_land-24px_flippedx.svg';\r\nimport { ReactComponent as FlightTakeoffIcon } from './../resources/flight_takeoff-24px.svg';\r\nimport { ReactComponent as FlightTakeoffFlippedIcon } from './../resources/flight_takeoff-24px_flippedx.svg';\r\n\r\nconst altitudeStateLimit = 1000;\r\n\r\nexport const getFormattedValue = (rawValue: number, maxFractionDigits: number) => {\r\n\r\n  const NumberFormatter = new Intl.NumberFormat('de-CH', { style: 'decimal', useGrouping: false, maximumFractionDigits: maxFractionDigits });\r\n  return NumberFormatter.format(rawValue);\r\n};\r\n\r\nexport const getIconName = (isOnGround: boolean, verticalRate: number, altitude: number, trueTrack: number): string => {\r\n\r\n  if (isOnGround)\r\n    return 'flight-icon';\r\n\r\n  if (altitude <= 0)\r\n    return 'flight-icon';\r\n\r\n  if (verticalRate > 0 && altitude < altitudeStateLimit)\r\n    if (trueTrack < 180)\r\n      return 'flight-takeoff-icon';\r\n    else\r\n      return 'flight-takeoff-flipped-icon';\r\n\r\n  if (verticalRate < 0 && altitude < altitudeStateLimit)\r\n    if (trueTrack < 180)\r\n      return 'flight-land-icon';\r\n    else\r\n      return 'flight-land-flipped-icon';\r\n\r\n  return 'flight-icon';\r\n};\r\n\r\nexport const getIcon = (isOnGround: boolean, verticalRate: number, altitude: number) => {\r\n\r\n  if (isOnGround)\r\n    return FlightIcon;\r\n\r\n  if (altitude <= 0)\r\n    return FlightIcon;\r\n\r\n  if (verticalRate > 0 && altitude < altitudeStateLimit)\r\n    return FlightTakeoffIcon;\r\n\r\n  if (verticalRate < 0 && altitude < altitudeStateLimit)\r\n    return FlightLandIcon;\r\n\r\n  return FlightIcon;\r\n};\r\n\r\nexport const getRotation = (trueTrack: number, verticalRate: number, altitude: number) => {\r\n\r\n  if (verticalRate > 0 && altitude < altitudeStateLimit)\r\n    return 0.0;\r\n\r\n  if (verticalRate < 0 && altitude < altitudeStateLimit)\r\n    return 0.0;\r\n\r\n  return trueTrack;\r\n};\r\n\r\nexport const getColor = (altitude: number) => {\r\n\r\n  var percent = altitude / 13000 * 100;\r\n  if (percent > 100)\r\n    percent = 100;\r\n  if (percent < 0)\r\n    percent = 0;\r\n\r\n  var r, g, b = 0;\r\n  if (percent < 50) {\r\n    r = 255;\r\n    g = Math.round(5.1 * percent);\r\n  }\r\n  else {\r\n    g = 255;\r\n    r = Math.round(510 - 5.10 * percent);\r\n  }\r\n\r\n  var h = r * 0x10000 + g * 0x100 + b * 0x1;\r\n\r\n  return '#' + ('000000' + h.toString(16)).slice(-6);\r\n};\r\n\r\nexport const getStatusText = (isOnGround: boolean, verticalRate: number, altitude: number): string => {\r\n\r\n  if (isOnGround)\r\n    return 'On Ground';\r\n\r\n  if (altitude <= 0)\r\n    return 'On Ground';\r\n\r\n  if (verticalRate > 0 && altitude < altitudeStateLimit)\r\n    return 'Taking off';\r\n\r\n  if (verticalRate < 0 && altitude < altitudeStateLimit)\r\n    return 'Landing';\r\n\r\n  return 'On Track';\r\n};\r\n","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\opensky\\types.ts",[],["129","130"],"C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\components\\FlightMap.tsx",["131"],"import React, { useContext, useState, useRef, useEffect } from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport MapGL, { FullscreenControl, NavigationControl, MapLoadEvent, PointerEvent, ViewportProps, ExtraState } from 'react-map-gl';\r\nimport { Feature } from 'geojson';\r\nimport { svgToImageAsync } from '@daniel.neuweiler/ts-lib-module';\r\nimport { GlobalContext } from '@daniel.neuweiler/react-lib-module';\r\n\r\nimport AircraftInfoOverlay from './AircraftInfoOverlay';\r\nimport DataOverlay from './DataOverlay';\r\nimport LogOverlay from './LogOverlay';\r\nimport AircraftLayer from './AircraftLayer';\r\nimport { Constants } from './../mapbox';\r\nimport { IStateVectorData, IAircraftTrack, IMapGeoBounds } from './../opensky';\r\nimport { SettingKeys } from './../views/SettingsView';\r\n\r\nimport FlightIcon from './../resources/flight-24px.svg';\r\nimport FlightLandIcon from './../resources/flight_land-24px.svg';\r\nimport FlightLandFlippedIcon from './../resources/flight_land-24px_flippedx.svg';\r\nimport FlightTakeoffIcon from './../resources/flight_takeoff-24px.svg';\r\nimport FlightTakeoffFlippedIcon from './../resources/flight_takeoff-24px_flippedx.svg';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    fullScreenControlContainer: {\r\n      position: 'absolute',\r\n      bottom: 140,\r\n      right: 0,\r\n      padding: '10px'\r\n    },\r\n    navigationControlContainer: {\r\n      position: 'absolute',\r\n      bottom: 38,\r\n      right: 0,\r\n      padding: '10px'\r\n    },\r\n    dataOverlayContainer: {\r\n      position: 'absolute',\r\n      bottom: 48,\r\n      right: 50,\r\n    },\r\n    logOverlayContainer: {\r\n      position: 'absolute',\r\n      bottom: 186,\r\n      right: 50,\r\n    },\r\n    mapControl: {\r\n      backgroundColor: theme.palette.grey[500]\r\n    },\r\n    aircraftOverlayContainer: {\r\n      position: 'absolute',\r\n      bottom: 38,\r\n      left: 0,\r\n      padding: '10px',\r\n    }\r\n  }),\r\n);\r\n\r\ninterface ILocalProps {\r\n  stateVectors: IStateVectorData;\r\n  selectedAircraft?: IAircraftTrack;\r\n  onMapChange?: (viewState: ViewportProps, geoBounds: IMapGeoBounds) => void;\r\n  onTrackAircraft?: (icao24: string) => void;\r\n  onReleaseTrack?: (icao24: string) => void;\r\n}\r\ntype Props = ILocalProps;\r\n\r\nconst FlightMap: React.FC<Props> = (props) => {\r\n\r\n  // External hooks\r\n  const classes = useStyles();\r\n\r\n  // Contexts\r\n  const globalContext = useContext(GlobalContext);\r\n\r\n  // States\r\n  const [viewportProps, setViewportProps] = useState<ViewportProps | undefined>(undefined);\r\n\r\n  // Refs\r\n  const mapRef = useRef<MapGL>(null);\r\n\r\n  // Effects\r\n  useEffect(() => {\r\n\r\n    // Mount\r\n\r\n    // Unmount\r\n    return () => {\r\n    }\r\n  }, []);\r\n  useEffect(() => {\r\n\r\n    const mapGeoBounds = getMapGeoBounds();\r\n    if (props.onMapChange && viewportProps)\r\n      props.onMapChange(viewportProps, mapGeoBounds);\r\n\r\n  }, [mapRef.current]);\r\n\r\n  const getMapGeoBounds = () => {\r\n\r\n    var mapGeoBounds: IMapGeoBounds = {\r\n      northernLatitude: 0.0,\r\n      easternLongitude: 0.0,\r\n      southernLatitude: 0.0,\r\n      westernLongitude: 0.0\r\n    }\r\n\r\n    if (mapRef.current) {\r\n\r\n      const mapGL = mapRef.current.getMap();\r\n      const mapBounds = mapGL.getBounds();\r\n      mapGeoBounds.northernLatitude = mapBounds.getNorthEast().lat;\r\n      mapGeoBounds.easternLongitude = mapBounds.getNorthEast().lng;\r\n      mapGeoBounds.southernLatitude = mapBounds.getSouthWest().lat;\r\n      mapGeoBounds.westernLongitude = mapBounds.getSouthWest().lng;\r\n    }\r\n\r\n    return mapGeoBounds;\r\n  };\r\n\r\n  const handleLoad = (e: MapLoadEvent) => {\r\n\r\n    if (!mapRef.current)\r\n      return;\r\n\r\n    var map = mapRef.current.getMap();\r\n\r\n    svgToImageAsync(FlightIcon, 24, 24).then(image => {\r\n\r\n      map.addImage('flight-icon', image, { sdf: true });\r\n    });\r\n    svgToImageAsync(FlightLandIcon, 24, 24).then(image => {\r\n\r\n      map.addImage('flight-land-icon', image, { sdf: true });\r\n    });\r\n    svgToImageAsync(FlightLandFlippedIcon, 24, 24).then(image => {\r\n\r\n      map.addImage('flight-land-flipped-icon', image, { sdf: true });\r\n    });\r\n    svgToImageAsync(FlightTakeoffIcon, 24, 24).then(image => {\r\n\r\n      map.addImage('flight-takeoff-icon', image, { sdf: true });\r\n    });\r\n    svgToImageAsync(FlightTakeoffFlippedIcon, 24, 24).then(image => {\r\n\r\n      map.addImage('flight-takeoff-flipped-icon', image, { sdf: true });\r\n    });\r\n  };\r\n\r\n  const handleClick = (e: PointerEvent) => {\r\n\r\n    if (e.features.length > 0) {\r\n\r\n      const selectedFeature = e.features[0] as Feature;\r\n      if (selectedFeature.properties) {\r\n\r\n        const icao24 = selectedFeature.properties['icao24'] as string;\r\n        if (icao24)\r\n          if (props.onTrackAircraft)\r\n            props.onTrackAircraft(icao24);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleViewportChange = (viewState: ViewportProps, interactionState: ExtraState, oldViewState: ViewportProps) => {\r\n\r\n    setViewportProps(viewState);\r\n\r\n    const mapGeoBounds = getMapGeoBounds();\r\n    if (props.onMapChange)\r\n      props.onMapChange(viewState, mapGeoBounds);\r\n\r\n  };\r\n\r\n  // Helpers\r\n  const settings = {\r\n    dragPan: true,\r\n    dragRotate: false,\r\n    scrollZoom: true,\r\n    touchZoom: true,\r\n    touchRotate: true,\r\n    keyboard: true,\r\n    doubleClickZoom: true,\r\n    minZoom: 0,\r\n    maxZoom: 20,\r\n    minPitch: 0,\r\n    maxPitch: 85\r\n  }\r\n\r\n  const showDataOverlayOnMap = globalContext.getSetting(SettingKeys.ShowDataOverlayOnMap);\r\n  const showLogOverlayOnMap = globalContext.getSetting(SettingKeys.ShowLogOverlayOnMap);\r\n\r\n  return (\r\n\r\n    <MapGL\r\n      ref={mapRef}\r\n      zoom={Constants.DEFAULT_ZOOM}\r\n      latitude={Constants.DEFAULT_LATITUDE}\r\n      longitude={Constants.DEFAULT_LONGITUDE}\r\n      {...viewportProps}\r\n      {...settings}\r\n      width={'100%'}\r\n      height={'100%'}\r\n      mapStyle=\"mapbox://styles/mapbox/dark-v10\"\r\n      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\r\n      onLoad={handleLoad}\r\n      onClick={handleClick}\r\n      onViewportChange={handleViewportChange}>\r\n\r\n      <div className={classes.fullScreenControlContainer}>\r\n        <FullscreenControl className={classes.mapControl} />\r\n      </div>\r\n      <div className={classes.navigationControlContainer}>\r\n        <NavigationControl className={classes.mapControl} />\r\n      </div>\r\n\r\n      {showDataOverlayOnMap &&\r\n        <div className={classes.dataOverlayContainer}>\r\n          <DataOverlay\r\n            stateVectors={props.stateVectors} />\r\n        </div>\r\n      }\r\n\r\n      {showLogOverlayOnMap &&\r\n        <div className={classes.logOverlayContainer}>\r\n          <LogOverlay />\r\n        </div>\r\n      }\r\n\r\n      {props.selectedAircraft &&\r\n        <div className={classes.aircraftOverlayContainer}>\r\n          <AircraftInfoOverlay\r\n            selectedAircraft={props.selectedAircraft}\r\n            onRelease={props.onReleaseTrack} />\r\n        </div>\r\n      }\r\n\r\n      <AircraftLayer\r\n        stateVectors={props.stateVectors}\r\n        zoom={viewportProps ? viewportProps.zoom : undefined}\r\n        selectedAircraft={props.selectedAircraft} />\r\n\r\n    </MapGL>\r\n  );\r\n}\r\n\r\nexport default FlightMap;","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\components\\LogOverlay.tsx",[],["132","133"],"C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\mapbox\\index.ts",[],"C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\pages\\ErrorPage.tsx",[],"C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\helpers\\index.ts",[],"C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\opensky\\constants.ts",[],["134","135"],"C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\services\\index.ts",[],{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","severity":1,"message":"141","line":5,"column":28,"nodeType":"142","messageId":"143","endLine":5,"endColumn":42},{"ruleId":"140","severity":1,"message":"144","line":5,"column":44,"nodeType":"142","messageId":"143","endLine":5,"endColumn":56},{"ruleId":"145","severity":1,"message":"146","line":140,"column":9,"nodeType":"147","messageId":"148","endLine":140,"endColumn":39,"fix":"149"},{"ruleId":"136","replacedBy":"150"},{"ruleId":"138","replacedBy":"151"},{"ruleId":"140","severity":1,"message":"152","line":1,"column":27,"nodeType":"142","messageId":"143","endLine":1,"endColumn":37},{"ruleId":"140","severity":1,"message":"153","line":1,"column":50,"nodeType":"142","messageId":"143","endLine":1,"endColumn":57},{"ruleId":"140","severity":1,"message":"154","line":1,"column":59,"nodeType":"142","messageId":"143","endLine":1,"endColumn":67},{"ruleId":"140","severity":1,"message":"155","line":2,"column":43,"nodeType":"142","messageId":"143","endLine":2,"endColumn":51},{"ruleId":"140","severity":1,"message":"156","line":11,"column":34,"nodeType":"142","messageId":"143","endLine":11,"endColumn":42},{"ruleId":"136","replacedBy":"157"},{"ruleId":"138","replacedBy":"158"},{"ruleId":"140","severity":1,"message":"159","line":14,"column":9,"nodeType":"142","messageId":"143","endLine":14,"endColumn":28},{"ruleId":"140","severity":1,"message":"159","line":34,"column":9,"nodeType":"142","messageId":"143","endLine":34,"endColumn":28},{"ruleId":"136","replacedBy":"160"},{"ruleId":"138","replacedBy":"161"},{"ruleId":"140","severity":1,"message":"155","line":2,"column":43,"nodeType":"142","messageId":"143","endLine":2,"endColumn":51},{"ruleId":"136","replacedBy":"162"},{"ruleId":"138","replacedBy":"163"},{"ruleId":"136","replacedBy":"164"},{"ruleId":"138","replacedBy":"165"},{"ruleId":"140","severity":1,"message":"166","line":3,"column":28,"nodeType":"142","messageId":"143","endLine":3,"endColumn":49},{"ruleId":"140","severity":1,"message":"167","line":5,"column":28,"nodeType":"142","messageId":"143","endLine":5,"endColumn":52},{"ruleId":"136","replacedBy":"168"},{"ruleId":"138","replacedBy":"169"},{"ruleId":"170","severity":1,"message":"171","line":96,"column":6,"nodeType":"172","endLine":96,"endColumn":22,"suggestions":"173"},{"ruleId":"136","replacedBy":"174"},{"ruleId":"138","replacedBy":"175"},{"ruleId":"136","replacedBy":"176"},{"ruleId":"138","replacedBy":"177"},"no-native-reassign",["178"],"no-negated-in-lhs",["179"],"@typescript-eslint/no-unused-vars","'IAircraftTrack' is defined but never used.","Identifier","unusedVar","'IStateVector' is defined but never used.","no-useless-computed-key","Unnecessarily computed property ['icao24'] found.","Property","unnecessarilyComputedProperty",{"range":"180","text":"181"},["178"],["179"],"'useContext' is defined but never used.","'useMemo' is defined but never used.","'Suspense' is defined but never used.","'useTheme' is defined but never used.","'ViewKeys' is defined but never used.",["178"],["179"],"'contextName' is assigned a value but never used.",["178"],["179"],["178"],["179"],["178"],["179"],"'FlightLandFlippedIcon' is defined but never used.","'FlightTakeoffFlippedIcon' is defined but never used.",["178"],["179"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props' and 'viewportProps'. Either include them or remove the dependency array. Mutable values like 'mapRef.current' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["182"],["178"],["179"],["178"],["179"],"no-global-assign","no-unsafe-negation",[5493,5503],"'icao24'",{"desc":"183","fix":"184"},"Update the dependencies array to be: [props, viewportProps]",{"range":"185","text":"186"},[2866,2882],"[props, viewportProps]"]