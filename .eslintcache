[{"C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\index.tsx":"1","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\services\\geospatialService.ts":"2","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\mapbox\\constants.ts":"3","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\pages\\App.test.tsx":"4","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\components\\DataOverlay.tsx":"5","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\setupTests.ts":"6","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\react-app-env.d.ts":"7","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\serviceWorker.ts":"8","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\pages\\StartPage.tsx":"9","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\services\\openSkyAPIService.ts":"10","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\opensky\\constants.ts":"11","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\helpers\\index.ts":"12","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\services\\index.ts":"13"},{"size":436,"mtime":1583393386437,"results":"14","hashOfConfig":"15"},{"size":5911,"mtime":1606856584711,"results":"16","hashOfConfig":"15"},{"size":154,"mtime":1583783136512,"results":"17","hashOfConfig":"15"},{"size":280,"mtime":1582379522788,"results":"18","hashOfConfig":"15"},{"size":1440,"mtime":1586110111850,"results":"19","hashOfConfig":"15"},{"size":255,"mtime":499162500000,"results":"20","hashOfConfig":"15"},{"size":41,"mtime":1582376319659,"results":"21","hashOfConfig":"15"},{"size":5295,"mtime":499162500000,"results":"22","hashOfConfig":"15"},{"size":694,"mtime":1589224705826,"results":"23","hashOfConfig":"15"},{"size":13471,"mtime":1606854911328,"results":"24","hashOfConfig":"15"},{"size":482,"mtime":1584189982443,"results":"25","hashOfConfig":"15"},{"size":40,"mtime":1584134872380,"results":"26","hashOfConfig":"15"},{"size":76,"mtime":1584092716635,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1gatkn",{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\index.tsx",[],["57","58"],"C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\services\\geospatialService.ts",["59","60","61"],"import { IService, Service, IResponse, createResponse, ResponseStateEnumeration } from '@daniel.neuweiler/ts-lib-module';\r\nimport { Feature, GeoJsonProperties, Point } from 'geojson';\r\nimport destination from '@turf/destination';\r\n\r\nimport { IStateVectorData, IAircraftTrack, IStateVector } from '../opensky';\r\n\r\n// Earth radius in meters\r\nconst earthRadius = 6371008.8;\r\n\r\nexport type PathPredictionUpdatedCallbackMethod = (destinations: Array<Feature<Point, GeoJsonProperties>>) => void;\r\ninterface IPathPredictionUpdatedSubscriberDictionary { [key: string]: PathPredictionUpdatedCallbackMethod };\r\n\r\nexport interface IGeospatialService extends IService {\r\n  restartPathPrediction: (stateVectors: IStateVectorData) => void;\r\n  stopPathPrediction: () => void;\r\n  onPathPredictionUpdated: (contextKey: string, callbackHandler: PathPredictionUpdatedCallbackMethod) => string;\r\n  offPathPredictionUpdated: (registerKey: string) => boolean;\r\n};\r\n\r\nexport class GeospatialService extends Service implements IGeospatialService {\r\n\r\n  // Props\r\n  private pathPredictionInterval: number = 100;\r\n  private pathPredictionCounter: number = 0;\r\n  private pathPredictionIntervalID: number = 0;\r\n  private pathPredictionUpdatedSubscriberDictionary: IPathPredictionUpdatedSubscriberDictionary = {};\r\n  private pathPredictionUpdatedSubscriptionCounter: number = 0;\r\n\r\n  constructor() {\r\n    super('GeospatialService');\r\n\r\n  };\r\n\r\n  public restartPathPrediction = (stateVectors: IStateVectorData) => {\r\n\r\n    clearInterval(this.pathPredictionIntervalID);\r\n    this.pathPredictionCounter = 0;\r\n    this.pathPredictionIntervalID = window.setInterval(this.calculatePath, this.pathPredictionInterval, stateVectors);\r\n  };\r\n\r\n  public stopPathPrediction = () => {\r\n\r\n    clearInterval(this.pathPredictionIntervalID);\r\n  };\r\n\r\n  public onPathPredictionUpdated = (contextKey: string, callbackHandler: PathPredictionUpdatedCallbackMethod) => {\r\n\r\n    // Setup register key\r\n    this.pathPredictionUpdatedSubscriptionCounter++;\r\n    const registerKey = `${contextKey}_${this.pathPredictionUpdatedSubscriptionCounter}`\r\n\r\n    // Register callback\r\n    this.pathPredictionUpdatedSubscriberDictionary[registerKey] = callbackHandler;\r\n    this.logger.debug(`Component with key '${registerKey}' has subscribed on 'PathPredictionUpdated'.`);\r\n    this.logger.debug(`'${Object.entries(this.pathPredictionUpdatedSubscriberDictionary).length}' subscribers on 'PathPredictionUpdated'.`);\r\n\r\n    return registerKey;\r\n  };\r\n\r\n  public offPathPredictionUpdated = (registerKey: string) => {\r\n\r\n    // Delete callback\r\n    var existingSubscriber = Object.entries(this.pathPredictionUpdatedSubscriberDictionary).find(([key, value]) => key === registerKey);\r\n    if (existingSubscriber) {\r\n\r\n      delete this.pathPredictionUpdatedSubscriberDictionary[registerKey];\r\n      this.logger.debug(`Component with key '${registerKey}' has unsubscribed on 'PathPredictionUpdated'.`);\r\n      this.logger.debug(`'${Object.entries(this.pathPredictionUpdatedSubscriberDictionary).length}' subscribers on 'PathPredictionUpdated'.`);\r\n\r\n      return true;\r\n    }\r\n    else {\r\n\r\n      this.logger.error(`Component with key '${registerKey}' not registered on 'PathPredictionUpdated'.`);\r\n      this.logger.debug(`'${Object.entries(this.pathPredictionUpdatedSubscriberDictionary).length}' subscribers on 'PathPredictionUpdated'.`);\r\n\r\n      return false;\r\n    };\r\n  };\r\n\r\n  protected async onStarting(): Promise<IResponse<boolean>> {\r\n    return createResponse<boolean>(true, ResponseStateEnumeration.OK, []);\r\n  };\r\n\r\n  protected async onStopping(): Promise<IResponse<boolean>> {\r\n\r\n    clearInterval(this.pathPredictionIntervalID);\r\n\r\n    return createResponse<boolean>(true, ResponseStateEnumeration.OK, []);\r\n  };\r\n\r\n  private calculatePath = (stateVectors: IStateVectorData) => {\r\n\r\n    const features: Array<Feature<Point, GeoJsonProperties>> = [];\r\n\r\n    for (var stateVector of stateVectors.states) {\r\n\r\n      // Setup last position time in ms\r\n      var lastPositionTime = this.pathPredictionCounter\r\n\r\n      // Setup altitude in m\r\n      var altitude = stateVector.geo_altitude;\r\n      if ((altitude === null) || (altitude < 0))\r\n        altitude = stateVector.baro_altitude;\r\n      if ((altitude === null) || (altitude < 0))\r\n        altitude = 0;\r\n\r\n      // Setup vertical rate\r\n      var verticalRate = stateVector.vertical_rate ? stateVector.vertical_rate : 0.0;\r\n      if (verticalRate < 0)\r\n        verticalRate *= -1;\r\n\r\n      const origin: Array<number> = [stateVector.longitude ? stateVector.longitude : 0, stateVector.latitude ? stateVector.latitude : 0]\r\n      const velocity = stateVector.velocity ? stateVector.velocity : 0;\r\n\r\n      var distance = (velocity * lastPositionTime) / 1000;\r\n\r\n      // Try to adjust the distance to the vertical rate\r\n      if (verticalRate !== 0)\r\n        distance = distance - (verticalRate * (lastPositionTime / 1000));\r\n\r\n      // Try to adjust the distance to the altitude\r\n      if (altitude > 0)\r\n        distance = (distance * earthRadius) / (earthRadius + altitude);\r\n\r\n      const bearing = stateVector.true_track ? stateVector.true_track : 0;\r\n\r\n      // Calculate the destination\r\n      const feature = destination(\r\n        origin,\r\n        distance,\r\n        bearing,\r\n        {\r\n          units: \"meters\"\r\n        }\r\n      );\r\n\r\n      // Adding the ICAO24 prop to the feature so that a corresponding assignment is possible later\r\n      var properties: GeoJsonProperties = {\r\n        ['icao24']: stateVector.icao24\r\n      };\r\n      feature.properties = properties;\r\n\r\n      // Push the feature to the collection\r\n      features.push(feature);\r\n    }\r\n\r\n    // Increase counter time\r\n    this.pathPredictionCounter += this.pathPredictionInterval;\r\n\r\n    // Execute callbacks\r\n    Object.entries(this.pathPredictionUpdatedSubscriberDictionary).forEach(([key, value], index) => value(features))\r\n  };\r\n}\r\n","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\mapbox\\constants.ts",[],"C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\pages\\App.test.tsx",[],"C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\components\\DataOverlay.tsx",["62"],"C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\setupTests.ts",[],"C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\react-app-env.d.ts",[],"C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\serviceWorker.ts",[],"C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\pages\\StartPage.tsx",[],"C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\services\\openSkyAPIService.ts",["63","64"],"import { IService, Service, ServiceStateEnumeration, ServiceKeys, IRESTService, IResponse, createResponse, ResponseStateEnumeration } from '@daniel.neuweiler/ts-lib-module';\r\nimport {\r\n  IStateVectorData, IStateVectorRawData, IStateVector,\r\n  IAircraftFlight, IAircraftTrack,\r\n  IMapGeoBounds\r\n} from './../opensky/types';\r\nimport { URL, Constants } from './../opensky/constants';\r\n\r\nconst defaultStateInterval: number = 12000;\r\nconst registeredSatetInterval: number = 6000;\r\nconst metadataInterval: number = 5000;\r\n\r\nexport type StateVectorsUpdatedCallbackMethod = (stateVectors: IStateVectorData) => void;\r\ninterface IStateVectorsUpdatedSubscriberDictionary { [key: string]: StateVectorsUpdatedCallbackMethod };\r\n\r\nexport type AircraftTrackUpdatedCallbackMethod = (track: IAircraftTrack) => void;\r\ninterface IAircraftTrackUpdatedSubscriberDictionary { [key: string]: AircraftTrackUpdatedCallbackMethod };\r\n\r\nexport interface IOpenSkyAPIService extends IService {\r\n  geoBounds: IMapGeoBounds;\r\n  onStateVectorsUpdated: (registerKey: string, callbackHandler: StateVectorsUpdatedCallbackMethod) => void;\r\n  offStateVectorsUpdated: (registerKey: string) => void;\r\n  trackAircraft: (icao24: string) => void;\r\n  releaseTrack: (icao24: string) => void;\r\n  onAircraftTrackUpdated: (registerKey: string, callbackHandler: AircraftTrackUpdatedCallbackMethod) => void;\r\n  offAircraftTrackUpdated: (registerKey: string) => void;\r\n};\r\n\r\nexport class OpenSkyAPIService extends Service implements IOpenSkyAPIService {\r\n\r\n  // IOpenSkyAPIService\r\n  public geoBounds: IMapGeoBounds;\r\n\r\n  // Props\r\n  private restService?: IRESTService;\r\n\r\n  private userName?: string;\r\n  private password?: string;\r\n  private hasCredentials: boolean = false;\r\n\r\n  private fetchStateVectorsIntervalID: number = 0;\r\n  private isFetchingStateVectors: boolean = false;\r\n  private stateVectorsUpdatedSubscriberDictionary: IStateVectorsUpdatedSubscriberDictionary = {};\r\n\r\n  private fetchAircraftStateIntervalID: number = 0;\r\n  private isFetchingAircraftStateVector: boolean = false;\r\n\r\n  private fetchAircraftRouteIntervalID: number = 0;\r\n  private isFetchingAircraftRoute: boolean = false;\r\n\r\n  private fetchAircraftDataIntervalID: number = 0;\r\n  private isFetchingAircraftData: boolean = false;\r\n\r\n  private aircraftTrackUpdatedSubscriberDictionary: IAircraftTrackUpdatedSubscriberDictionary = {};\r\n  private trackedAircraft: IAircraftTrack;\r\n\r\n  constructor(userName?: string, password?: string) {\r\n    super('OpenSkyAPIService');\r\n\r\n    this.userName = userName;\r\n    this.password = password;\r\n\r\n    this.geoBounds = {\r\n      southernLatitude: Constants.DEFAULT_MIN_LATITUDE,\r\n      northernLatitude: Constants.DEFAULT_MAX_LATITUDE,\r\n      westernLongitude: Constants.DEFAULT_MIN_LONGITUDE,\r\n      easternLongitude: Constants.DEFAULT_MAX_LONGITUDE\r\n    };\r\n\r\n    this.trackedAircraft = {\r\n      icao24: '',\r\n      callsign: ''\r\n    };\r\n  };\r\n\r\n  public onStateVectorsUpdated = (registerKey: string, callbackHandler: StateVectorsUpdatedCallbackMethod) => {\r\n\r\n    // Check if the callback handler is already registred, otherwise it will be added\r\n    var existingSubscriber = Object.entries(this.stateVectorsUpdatedSubscriberDictionary).find(([key, value], index) => key === registerKey)\r\n    if (!existingSubscriber)\r\n      this.stateVectorsUpdatedSubscriberDictionary[registerKey] = callbackHandler;\r\n\r\n    this.logger.debug(`New subscription for 'StateVectorsUpdated' with key '${registerKey}'.`);\r\n    this.logger.debug(`'${Object.entries(this.stateVectorsUpdatedSubscriberDictionary).length}' subscribers for 'StateVectorsUpdated' registered.`);\r\n  };\r\n\r\n  public offStateVectorsUpdated = (registerKey: string) => {\r\n\r\n    var existingSubscriber = Object.entries(this.stateVectorsUpdatedSubscriberDictionary).find(([key, value], index) => key === registerKey)\r\n    if (existingSubscriber)\r\n      delete this.stateVectorsUpdatedSubscriberDictionary[registerKey];\r\n\r\n    this.logger.debug(`Subscription for 'StateVectorsUpdated' has removed with key '${registerKey}'.`);\r\n    this.logger.debug(`'${Object.entries(this.stateVectorsUpdatedSubscriberDictionary).length}' subscribers for 'StateVectorsUpdated' registered.`);\r\n  };\r\n\r\n  public trackAircraft = (icao24: string) => {\r\n\r\n    if (this.trackedAircraft.icao24 !== '') {\r\n\r\n      this.logger.info(`Stop tracking for aircraft '${this.trackedAircraft.icao24}'.`);\r\n    }\r\n\r\n    clearInterval(this.fetchAircraftStateIntervalID);\r\n    clearInterval(this.fetchAircraftRouteIntervalID);\r\n    clearInterval(this.fetchAircraftDataIntervalID);\r\n\r\n    this.trackedAircraft.icao24 = icao24;\r\n    this.trackedAircraft.callsign = '';\r\n    this.logger.info(`Start tracking for aircraft '${icao24}'.`);\r\n\r\n    this.fetchAircraftState();\r\n    // this.fetchAircraftRoute();\r\n    // this.fetchAircraftData();\r\n\r\n    const fetchStateVectorInterval: number = this.hasCredentials ? registeredSatetInterval : defaultStateInterval;\r\n    this.fetchAircraftStateIntervalID = window.setInterval(this.fetchAircraftState, fetchStateVectorInterval);\r\n  };\r\n\r\n  public releaseTrack = (icao24: string) => {\r\n\r\n    clearInterval(this.fetchAircraftStateIntervalID);\r\n    clearInterval(this.fetchAircraftRouteIntervalID);\r\n    clearInterval(this.fetchAircraftDataIntervalID);\r\n\r\n    this.trackedAircraft.icao24 = '';\r\n    this.trackedAircraft.callsign = '';\r\n    this.logger.info(`Stop tracking for aircraft '${icao24}'.`);\r\n  };\r\n\r\n  public onAircraftTrackUpdated = (registerKey: string, callbackHandler: AircraftTrackUpdatedCallbackMethod) => {\r\n\r\n    // Check if the callback handler is already registred, otherwise it will be added\r\n    var existingSubscriber = Object.entries(this.aircraftTrackUpdatedSubscriberDictionary).find(([key, value], index) => key === registerKey)\r\n    if (!existingSubscriber)\r\n      this.aircraftTrackUpdatedSubscriberDictionary[registerKey] = callbackHandler;\r\n\r\n    this.logger.debug(`New subscription for 'AircraftTrackUpdated' with key '${registerKey}'.`);\r\n    this.logger.debug(`'${Object.entries(this.aircraftTrackUpdatedSubscriberDictionary).length}' subscribers for 'AircraftTrackUpdated' registered.`);\r\n  };\r\n\r\n  public offAircraftTrackUpdated = (registerKey: string) => {\r\n\r\n    var existingSubscriber = Object.entries(this.aircraftTrackUpdatedSubscriberDictionary).find(([key, value], index) => key === registerKey)\r\n    if (existingSubscriber)\r\n      delete this.aircraftTrackUpdatedSubscriberDictionary[registerKey];\r\n\r\n    this.logger.debug(`Subscription for 'AircraftTrackUpdated' has removed with key '${registerKey}'.`);\r\n    this.logger.debug(`'${Object.entries(this.aircraftTrackUpdatedSubscriberDictionary).length}' subscribers for 'AircraftTrackUpdated' registered.`);\r\n  };\r\n\r\n  protected async onStarting(): Promise<IResponse<boolean>> {\r\n\r\n    // Setup response\r\n    const response = createResponse<boolean>(true, ResponseStateEnumeration.OK, []);\r\n\r\n    // Check if the service provider was injected\r\n    if (!this.serviceProvider) {\r\n\r\n      this.updateState(ServiceStateEnumeration.Error);\r\n\r\n      response.payload = false;\r\n      response.messageStack = [\r\n        {\r\n          display: {\r\n            key: \"\",\r\n            value: `No service provider is injected. Service ${this.key} cannnot be started.`\r\n          },\r\n          context: ''\r\n        }\r\n      ]\r\n      return response;\r\n    };\r\n\r\n    // Get the REST service\r\n    this.restService = this.serviceProvider.getService<IRESTService>(ServiceKeys.RESTService);\r\n    if (!this.restService) {\r\n\r\n      this.updateState(ServiceStateEnumeration.Error);\r\n      response.payload = false;\r\n      response.messageStack = [\r\n        {\r\n          display: {\r\n            key: \"\",\r\n            value: `No REST service is available. Service ${this.key} cannnot be started.`\r\n          },\r\n          context: ''\r\n        }\r\n      ]\r\n      return response;\r\n    };\r\n\r\n    // Check for authorization\r\n    if (this.userName && this.password) {\r\n\r\n      this.hasCredentials = true;\r\n      this.restService.setAuthorization(`Basic ${btoa(`${this.userName}:${this.password}`)}`);\r\n\r\n      this.userName = undefined;\r\n      this.password = undefined;\r\n    };\r\n\r\n    const fetchStateVectorInterval: number = this.hasCredentials ? registeredSatetInterval : defaultStateInterval;\r\n    this.fetchStateVectorsIntervalID = window.setInterval(this.fetchStateVectors, fetchStateVectorInterval);\r\n\r\n    return response;\r\n  };\r\n\r\n  protected async onStopping(): Promise<IResponse<boolean>> {\r\n\r\n    clearInterval(this.fetchStateVectorsIntervalID);\r\n    clearInterval(this.fetchAircraftStateIntervalID);\r\n    clearInterval(this.fetchAircraftRouteIntervalID);\r\n    clearInterval(this.fetchAircraftDataIntervalID);\r\n\r\n    return createResponse<boolean>(true, ResponseStateEnumeration.OK, []);\r\n  };\r\n\r\n  private mapRawStateVectorData = (rawData: IStateVectorRawData) => {\r\n\r\n    const data: IStateVectorData = {\r\n      time: rawData.time,\r\n      states: []\r\n    };\r\n\r\n    if (!rawData.states)\r\n      return data;\r\n\r\n    for (var rawStateVector of rawData.states) {\r\n\r\n      const stateVector: IStateVector = {\r\n        icao24: rawStateVector[0],\r\n        callsign: rawStateVector[1],\r\n        origin_country: rawStateVector[2],\r\n        time_position: rawStateVector[3],\r\n        last_contact: rawStateVector[4],\r\n        longitude: rawStateVector[5],\r\n        latitude: rawStateVector[6],\r\n        baro_altitude: rawStateVector[7],\r\n        on_ground: rawStateVector[8],\r\n        velocity: rawStateVector[9],\r\n        true_track: rawStateVector[10],\r\n        vertical_rate: rawStateVector[11],\r\n        sensors: rawStateVector[12],\r\n        geo_altitude: rawStateVector[13],\r\n        squawk: rawStateVector[14],\r\n        spi: rawStateVector[15],\r\n        position_source: rawStateVector[16],\r\n      }\r\n\r\n      data.states.push(stateVector);\r\n    }\r\n\r\n    return data;\r\n  };\r\n\r\n  private fetchStateVectors = () => {\r\n\r\n    if (!this.restService)\r\n      return;\r\n\r\n    if (this.isFetchingStateVectors)\r\n      return;\r\n\r\n    this.isFetchingStateVectors = true;\r\n\r\n    var stateBounds = `?lamin=${this.geoBounds.southernLatitude}&lomin=${this.geoBounds.westernLongitude}&lamax=${this.geoBounds.northernLatitude}&lomax=${this.geoBounds.easternLongitude}`;\r\n    var targetURL = `${URL}/states/all${stateBounds}`;\r\n\r\n    this.restService.get<IStateVectorRawData>(targetURL, {\r\n      mode: 'cors',\r\n      credentials: this.hasCredentials ? 'include' : 'omit'\r\n    })\r\n      .then(response => {\r\n\r\n        if (response.payload) {\r\n\r\n          var mappedData = this.mapRawStateVectorData(response.payload);\r\n          Object.entries(this.stateVectorsUpdatedSubscriberDictionary).forEach(([key, value], index) => value(mappedData))\r\n        }\r\n\r\n        this.isFetchingStateVectors = false;\r\n      })\r\n      .finally(() => {\r\n\r\n        this.isFetchingStateVectors = false;\r\n      })\r\n  };\r\n\r\n  private fetchAircraftState = () => {\r\n\r\n    if (!this.restService)\r\n      return;\r\n\r\n    if (this.trackedAircraft.icao24 === '')\r\n      return;\r\n\r\n    if (this.isFetchingAircraftStateVector)\r\n      return;\r\n\r\n    this.isFetchingAircraftStateVector = true;\r\n\r\n    var targetURL = `${URL}/states/all?&icao24=${this.trackedAircraft.icao24}`;\r\n\r\n    this.restService.get<IStateVectorRawData>(targetURL, {\r\n      mode: 'cors',\r\n      credentials: this.hasCredentials ? 'include' : 'omit'\r\n    })\r\n      .then(response => {\r\n\r\n        if (response.payload) {\r\n\r\n          var mappedData = this.mapRawStateVectorData(response.payload);\r\n\r\n          if (mappedData.states.length > 0) {\r\n\r\n            this.trackedAircraft.stateVector = mappedData.states[0]\r\n            this.trackedAircraft.callsign = this.trackedAircraft.stateVector.callsign ? this.trackedAircraft.stateVector.callsign : '';\r\n\r\n            Object.entries(this.aircraftTrackUpdatedSubscriberDictionary).forEach(([key, value], index) => value(this.trackedAircraft))\r\n          }\r\n        }\r\n\r\n        this.isFetchingAircraftStateVector = false;\r\n      })\r\n      .finally(() => {\r\n\r\n        this.isFetchingAircraftStateVector = false;\r\n      })\r\n  };\r\n\r\n  private fetchAircraftRoute = () => {\r\n\r\n    if (!this.restService)\r\n      return;\r\n\r\n    if (this.trackedAircraft.callsign === '')\r\n      return;\r\n\r\n    if (this.isFetchingAircraftRoute)\r\n      return;\r\n\r\n    this.isFetchingAircraftRoute = true;\r\n\r\n    var targetURL = `${URL}/routes?callsign=${this.trackedAircraft.callsign}`;\r\n\r\n    this.restService.get<any>(targetURL, {\r\n      mode: 'no-cors',\r\n      credentials: this.hasCredentials ? 'include' : 'omit'\r\n    })\r\n      .then(response => {\r\n\r\n        if (response.payload) {\r\n\r\n          //Todo\r\n        }\r\n\r\n        this.isFetchingAircraftRoute = false;\r\n      })\r\n      .finally(() => {\r\n\r\n        this.isFetchingAircraftRoute = false;\r\n      })\r\n  };\r\n\r\n  private fetchAircraftData = () => {\r\n\r\n    if (!this.restService)\r\n      return;\r\n\r\n    if (this.trackedAircraft.icao24 === '')\r\n      return;\r\n\r\n    if (this.isFetchingAircraftData)\r\n      return;\r\n\r\n    this.isFetchingAircraftData = true;\r\n\r\n    var targetURL = `${URL}/metadata/aircraft/icao/${this.trackedAircraft.icao24}`;\r\n\r\n    this.restService.get<any>(targetURL, {\r\n      mode: 'no-cors',\r\n      credentials: 'include'\r\n    })\r\n      .then(response => {\r\n\r\n        if (response.payload) {\r\n\r\n          //Todo\r\n        }\r\n\r\n        this.isFetchingAircraftData = false;\r\n      })\r\n      .finally(() => {\r\n\r\n        this.isFetchingAircraftData = false;\r\n      })\r\n  };\r\n};","C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\opensky\\constants.ts",[],"C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\helpers\\index.ts",[],"C:\\Users\\danie\\Downloads\\GitHub\\react-flight-tracker\\src\\services\\index.ts",[],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":5,"column":28,"nodeType":"71","messageId":"72","endLine":5,"endColumn":42},{"ruleId":"69","severity":1,"message":"73","line":5,"column":44,"nodeType":"71","messageId":"72","endLine":5,"endColumn":56},{"ruleId":"74","severity":1,"message":"75","line":140,"column":9,"nodeType":"76","messageId":"77","endLine":140,"endColumn":39,"fix":"78"},{"ruleId":"69","severity":1,"message":"79","line":2,"column":43,"nodeType":"71","messageId":"72","endLine":2,"endColumn":51},{"ruleId":"69","severity":1,"message":"80","line":4,"column":3,"nodeType":"71","messageId":"72","endLine":4,"endColumn":18},{"ruleId":"69","severity":1,"message":"81","line":11,"column":7,"nodeType":"71","messageId":"72","endLine":11,"endColumn":31},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"@typescript-eslint/no-unused-vars","'IAircraftTrack' is defined but never used.","Identifier","unusedVar","'IStateVector' is defined but never used.","no-useless-computed-key","Unnecessarily computed property ['icao24'] found.","Property","unnecessarilyComputedProperty",{"range":"84","text":"85"},"'useTheme' is defined but never used.","'IAircraftFlight' is defined but never used.","'metadataInterval' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[5493,5503],"'icao24'"]